# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ScenarioReplayExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ScenarioReplayExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsScenarioReplayExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ScenarioReplayExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ScenarioReplayExcel
    def ModeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioReplayExcel
    def VolumeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioReplayExcel
    def ReplayType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioReplayExcel
    def ChapterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioReplayExcel
    def EpisodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioReplayExcel
    def FrontScenarioGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # ScenarioReplayExcel
    def FrontScenarioGroupIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # ScenarioReplayExcel
    def FrontScenarioGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ScenarioReplayExcel
    def FrontScenarioGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # ScenarioReplayExcel
    def GroundId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioReplayExcel
    def BattleDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioReplayExcel
    def BackScenarioGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # ScenarioReplayExcel
    def BackScenarioGroupIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # ScenarioReplayExcel
    def BackScenarioGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ScenarioReplayExcel
    def BackScenarioGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

def Start(builder): builder.StartObject(9)
def ScenarioReplayExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddModeId(builder, ModeId): builder.PrependInt64Slot(0, ModeId, 0)
def ScenarioReplayExcelAddModeId(builder, ModeId):
    """This method is deprecated. Please switch to AddModeId."""
    return AddModeId(builder, ModeId)
def AddVolumeId(builder, VolumeId): builder.PrependInt64Slot(1, VolumeId, 0)
def ScenarioReplayExcelAddVolumeId(builder, VolumeId):
    """This method is deprecated. Please switch to AddVolumeId."""
    return AddVolumeId(builder, VolumeId)
def AddReplayType(builder, ReplayType): builder.PrependInt32Slot(2, ReplayType, 0)
def ScenarioReplayExcelAddReplayType(builder, ReplayType):
    """This method is deprecated. Please switch to AddReplayType."""
    return AddReplayType(builder, ReplayType)
def AddChapterId(builder, ChapterId): builder.PrependInt64Slot(3, ChapterId, 0)
def ScenarioReplayExcelAddChapterId(builder, ChapterId):
    """This method is deprecated. Please switch to AddChapterId."""
    return AddChapterId(builder, ChapterId)
def AddEpisodeId(builder, EpisodeId): builder.PrependInt64Slot(4, EpisodeId, 0)
def ScenarioReplayExcelAddEpisodeId(builder, EpisodeId):
    """This method is deprecated. Please switch to AddEpisodeId."""
    return AddEpisodeId(builder, EpisodeId)
def AddFrontScenarioGroupId(builder, FrontScenarioGroupId): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(FrontScenarioGroupId), 0)
def ScenarioReplayExcelAddFrontScenarioGroupId(builder, FrontScenarioGroupId):
    """This method is deprecated. Please switch to AddFrontScenarioGroupId."""
    return AddFrontScenarioGroupId(builder, FrontScenarioGroupId)
def StartFrontScenarioGroupIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def ScenarioReplayExcelStartFrontScenarioGroupIdVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartFrontScenarioGroupIdVector(builder, numElems)
def AddGroundId(builder, GroundId): builder.PrependInt64Slot(6, GroundId, 0)
def ScenarioReplayExcelAddGroundId(builder, GroundId):
    """This method is deprecated. Please switch to AddGroundId."""
    return AddGroundId(builder, GroundId)
def AddBattleDuration(builder, BattleDuration): builder.PrependInt64Slot(7, BattleDuration, 0)
def ScenarioReplayExcelAddBattleDuration(builder, BattleDuration):
    """This method is deprecated. Please switch to AddBattleDuration."""
    return AddBattleDuration(builder, BattleDuration)
def AddBackScenarioGroupId(builder, BackScenarioGroupId): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(BackScenarioGroupId), 0)
def ScenarioReplayExcelAddBackScenarioGroupId(builder, BackScenarioGroupId):
    """This method is deprecated. Please switch to AddBackScenarioGroupId."""
    return AddBackScenarioGroupId(builder, BackScenarioGroupId)
def StartBackScenarioGroupIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def ScenarioReplayExcelStartBackScenarioGroupIdVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartBackScenarioGroupIdVector(builder, numElems)
def End(builder): return builder.EndObject()
def ScenarioReplayExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)