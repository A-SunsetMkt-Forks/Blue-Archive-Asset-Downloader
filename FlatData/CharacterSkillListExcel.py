# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CharacterSkillListExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CharacterSkillListExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCharacterSkillListExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CharacterSkillListExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CharacterSkillListExcel
    def CharacterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterSkillListExcel
    def MinimumGradeCharacterWeapon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterSkillListExcel
    def IsFormConversion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterSkillListExcel
    def IsRootMotion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterSkillListExcel
    def IsMoveLeftRight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterSkillListExcel
    def UseRandomAnimation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterSkillListExcel
    def NormalSkillGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CharacterSkillListExcel
    def NormalSkillGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterSkillListExcel
    def NormalSkillGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # CharacterSkillListExcel
    def ExSkillGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CharacterSkillListExcel
    def ExSkillGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterSkillListExcel
    def ExSkillGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # CharacterSkillListExcel
    def PublicSkillGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CharacterSkillListExcel
    def PublicSkillGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterSkillListExcel
    def PublicSkillGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # CharacterSkillListExcel
    def PassiveSkillGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CharacterSkillListExcel
    def PassiveSkillGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterSkillListExcel
    def PassiveSkillGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # CharacterSkillListExcel
    def LeaderSkillGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CharacterSkillListExcel
    def LeaderSkillGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterSkillListExcel
    def LeaderSkillGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # CharacterSkillListExcel
    def ExtraPassiveSkillGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CharacterSkillListExcel
    def ExtraPassiveSkillGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterSkillListExcel
    def ExtraPassiveSkillGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

def Start(builder): builder.StartObject(12)
def CharacterSkillListExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddCharacterId(builder, CharacterId): builder.PrependInt64Slot(0, CharacterId, 0)
def CharacterSkillListExcelAddCharacterId(builder, CharacterId):
    """This method is deprecated. Please switch to AddCharacterId."""
    return AddCharacterId(builder, CharacterId)
def AddMinimumGradeCharacterWeapon(builder, MinimumGradeCharacterWeapon): builder.PrependInt32Slot(1, MinimumGradeCharacterWeapon, 0)
def CharacterSkillListExcelAddMinimumGradeCharacterWeapon(builder, MinimumGradeCharacterWeapon):
    """This method is deprecated. Please switch to AddMinimumGradeCharacterWeapon."""
    return AddMinimumGradeCharacterWeapon(builder, MinimumGradeCharacterWeapon)
def AddIsFormConversion(builder, IsFormConversion): builder.PrependBoolSlot(2, IsFormConversion, 0)
def CharacterSkillListExcelAddIsFormConversion(builder, IsFormConversion):
    """This method is deprecated. Please switch to AddIsFormConversion."""
    return AddIsFormConversion(builder, IsFormConversion)
def AddIsRootMotion(builder, IsRootMotion): builder.PrependBoolSlot(3, IsRootMotion, 0)
def CharacterSkillListExcelAddIsRootMotion(builder, IsRootMotion):
    """This method is deprecated. Please switch to AddIsRootMotion."""
    return AddIsRootMotion(builder, IsRootMotion)
def AddIsMoveLeftRight(builder, IsMoveLeftRight): builder.PrependBoolSlot(4, IsMoveLeftRight, 0)
def CharacterSkillListExcelAddIsMoveLeftRight(builder, IsMoveLeftRight):
    """This method is deprecated. Please switch to AddIsMoveLeftRight."""
    return AddIsMoveLeftRight(builder, IsMoveLeftRight)
def AddUseRandomAnimation(builder, UseRandomAnimation): builder.PrependBoolSlot(5, UseRandomAnimation, 0)
def CharacterSkillListExcelAddUseRandomAnimation(builder, UseRandomAnimation):
    """This method is deprecated. Please switch to AddUseRandomAnimation."""
    return AddUseRandomAnimation(builder, UseRandomAnimation)
def AddNormalSkillGroupId(builder, NormalSkillGroupId): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(NormalSkillGroupId), 0)
def CharacterSkillListExcelAddNormalSkillGroupId(builder, NormalSkillGroupId):
    """This method is deprecated. Please switch to AddNormalSkillGroupId."""
    return AddNormalSkillGroupId(builder, NormalSkillGroupId)
def StartNormalSkillGroupIdVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterSkillListExcelStartNormalSkillGroupIdVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartNormalSkillGroupIdVector(builder, numElems)
def AddExSkillGroupId(builder, ExSkillGroupId): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(ExSkillGroupId), 0)
def CharacterSkillListExcelAddExSkillGroupId(builder, ExSkillGroupId):
    """This method is deprecated. Please switch to AddExSkillGroupId."""
    return AddExSkillGroupId(builder, ExSkillGroupId)
def StartExSkillGroupIdVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterSkillListExcelStartExSkillGroupIdVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartExSkillGroupIdVector(builder, numElems)
def AddPublicSkillGroupId(builder, PublicSkillGroupId): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(PublicSkillGroupId), 0)
def CharacterSkillListExcelAddPublicSkillGroupId(builder, PublicSkillGroupId):
    """This method is deprecated. Please switch to AddPublicSkillGroupId."""
    return AddPublicSkillGroupId(builder, PublicSkillGroupId)
def StartPublicSkillGroupIdVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterSkillListExcelStartPublicSkillGroupIdVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartPublicSkillGroupIdVector(builder, numElems)
def AddPassiveSkillGroupId(builder, PassiveSkillGroupId): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(PassiveSkillGroupId), 0)
def CharacterSkillListExcelAddPassiveSkillGroupId(builder, PassiveSkillGroupId):
    """This method is deprecated. Please switch to AddPassiveSkillGroupId."""
    return AddPassiveSkillGroupId(builder, PassiveSkillGroupId)
def StartPassiveSkillGroupIdVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterSkillListExcelStartPassiveSkillGroupIdVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartPassiveSkillGroupIdVector(builder, numElems)
def AddLeaderSkillGroupId(builder, LeaderSkillGroupId): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(LeaderSkillGroupId), 0)
def CharacterSkillListExcelAddLeaderSkillGroupId(builder, LeaderSkillGroupId):
    """This method is deprecated. Please switch to AddLeaderSkillGroupId."""
    return AddLeaderSkillGroupId(builder, LeaderSkillGroupId)
def StartLeaderSkillGroupIdVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterSkillListExcelStartLeaderSkillGroupIdVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartLeaderSkillGroupIdVector(builder, numElems)
def AddExtraPassiveSkillGroupId(builder, ExtraPassiveSkillGroupId): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(ExtraPassiveSkillGroupId), 0)
def CharacterSkillListExcelAddExtraPassiveSkillGroupId(builder, ExtraPassiveSkillGroupId):
    """This method is deprecated. Please switch to AddExtraPassiveSkillGroupId."""
    return AddExtraPassiveSkillGroupId(builder, ExtraPassiveSkillGroupId)
def StartExtraPassiveSkillGroupIdVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterSkillListExcelStartExtraPassiveSkillGroupIdVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartExtraPassiveSkillGroupIdVector(builder, numElems)
def End(builder): return builder.EndObject()
def CharacterSkillListExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)