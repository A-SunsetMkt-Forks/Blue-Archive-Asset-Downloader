# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RecipeIngredientExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RecipeIngredientExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRecipeIngredientExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RecipeIngredientExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RecipeIngredientExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # RecipeIngredientExcel
    def RecipeType_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # RecipeIngredientExcel
    def CostParcelType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # RecipeIngredientExcel
    def CostParcelTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # RecipeIngredientExcel
    def CostParcelTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RecipeIngredientExcel
    def CostParcelTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # RecipeIngredientExcel
    def CostId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # RecipeIngredientExcel
    def CostIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # RecipeIngredientExcel
    def CostIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RecipeIngredientExcel
    def CostIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # RecipeIngredientExcel
    def CostAmount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # RecipeIngredientExcel
    def CostAmountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # RecipeIngredientExcel
    def CostAmountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RecipeIngredientExcel
    def CostAmountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # RecipeIngredientExcel
    def IngredientParcelType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # RecipeIngredientExcel
    def IngredientParcelTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # RecipeIngredientExcel
    def IngredientParcelTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RecipeIngredientExcel
    def IngredientParcelTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # RecipeIngredientExcel
    def IngredientId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # RecipeIngredientExcel
    def IngredientIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # RecipeIngredientExcel
    def IngredientIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RecipeIngredientExcel
    def IngredientIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # RecipeIngredientExcel
    def IngredientAmount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # RecipeIngredientExcel
    def IngredientAmountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # RecipeIngredientExcel
    def IngredientAmountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RecipeIngredientExcel
    def IngredientAmountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # RecipeIngredientExcel
    def CostTimeInSecond(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(9)
def RecipeIngredientExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddId(builder, Id): builder.PrependInt64Slot(0, Id, 0)
def RecipeIngredientExcelAddId(builder, Id):
    """This method is deprecated. Please switch to AddId."""
    return AddId(builder, Id)
def AddRecipeType_(builder, RecipeType_): builder.PrependInt32Slot(1, RecipeType_, 0)
def RecipeIngredientExcelAddRecipeType_(builder, RecipeType_):
    """This method is deprecated. Please switch to AddRecipeType_."""
    return AddRecipeType_(builder, RecipeType_)
def AddCostParcelType(builder, CostParcelType): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(CostParcelType), 0)
def RecipeIngredientExcelAddCostParcelType(builder, CostParcelType):
    """This method is deprecated. Please switch to AddCostParcelType."""
    return AddCostParcelType(builder, CostParcelType)
def StartCostParcelTypeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def RecipeIngredientExcelStartCostParcelTypeVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartCostParcelTypeVector(builder, numElems)
def AddCostId(builder, CostId): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(CostId), 0)
def RecipeIngredientExcelAddCostId(builder, CostId):
    """This method is deprecated. Please switch to AddCostId."""
    return AddCostId(builder, CostId)
def StartCostIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def RecipeIngredientExcelStartCostIdVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartCostIdVector(builder, numElems)
def AddCostAmount(builder, CostAmount): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(CostAmount), 0)
def RecipeIngredientExcelAddCostAmount(builder, CostAmount):
    """This method is deprecated. Please switch to AddCostAmount."""
    return AddCostAmount(builder, CostAmount)
def StartCostAmountVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def RecipeIngredientExcelStartCostAmountVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartCostAmountVector(builder, numElems)
def AddIngredientParcelType(builder, IngredientParcelType): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(IngredientParcelType), 0)
def RecipeIngredientExcelAddIngredientParcelType(builder, IngredientParcelType):
    """This method is deprecated. Please switch to AddIngredientParcelType."""
    return AddIngredientParcelType(builder, IngredientParcelType)
def StartIngredientParcelTypeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def RecipeIngredientExcelStartIngredientParcelTypeVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartIngredientParcelTypeVector(builder, numElems)
def AddIngredientId(builder, IngredientId): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(IngredientId), 0)
def RecipeIngredientExcelAddIngredientId(builder, IngredientId):
    """This method is deprecated. Please switch to AddIngredientId."""
    return AddIngredientId(builder, IngredientId)
def StartIngredientIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def RecipeIngredientExcelStartIngredientIdVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartIngredientIdVector(builder, numElems)
def AddIngredientAmount(builder, IngredientAmount): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(IngredientAmount), 0)
def RecipeIngredientExcelAddIngredientAmount(builder, IngredientAmount):
    """This method is deprecated. Please switch to AddIngredientAmount."""
    return AddIngredientAmount(builder, IngredientAmount)
def StartIngredientAmountVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def RecipeIngredientExcelStartIngredientAmountVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartIngredientAmountVector(builder, numElems)
def AddCostTimeInSecond(builder, CostTimeInSecond): builder.PrependInt64Slot(8, CostTimeInSecond, 0)
def RecipeIngredientExcelAddCostTimeInSecond(builder, CostTimeInSecond):
    """This method is deprecated. Please switch to AddCostTimeInSecond."""
    return AddCostTimeInSecond(builder, CostTimeInSecond)
def End(builder): return builder.EndObject()
def RecipeIngredientExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)