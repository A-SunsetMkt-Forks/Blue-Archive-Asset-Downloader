# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MiniGameRhythmExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MiniGameRhythmExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMiniGameRhythmExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MiniGameRhythmExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MiniGameRhythmExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmExcel
    def RhythmBgmId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmExcel
    def PresetId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmExcel
    def StageDifficulty(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmExcel
    def IsSpecial(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # MiniGameRhythmExcel
    def OpenStageScoreAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmExcel
    def MaxHp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmExcel
    def MissDamage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmExcel
    def CriticalHPRestoreValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmExcel
    def MaxScore(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmExcel
    def FeverScoreRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmExcel
    def NoteScoreRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmExcel
    def ComboScoreRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmExcel
    def AttackScoreRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmExcel
    def FeverCriticalRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # MiniGameRhythmExcel
    def FeverAttackRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # MiniGameRhythmExcel
    def MaxHpScore(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmExcel
    def RhythmFileName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MiniGameRhythmExcel
    def ArtLevelSceneName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MiniGameRhythmExcel
    def ComboImagePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Start(builder): builder.StartObject(20)
def MiniGameRhythmExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddUniqueId(builder, UniqueId): builder.PrependInt64Slot(0, UniqueId, 0)
def MiniGameRhythmExcelAddUniqueId(builder, UniqueId):
    """This method is deprecated. Please switch to AddUniqueId."""
    return AddUniqueId(builder, UniqueId)
def AddRhythmBgmId(builder, RhythmBgmId): builder.PrependInt64Slot(1, RhythmBgmId, 0)
def MiniGameRhythmExcelAddRhythmBgmId(builder, RhythmBgmId):
    """This method is deprecated. Please switch to AddRhythmBgmId."""
    return AddRhythmBgmId(builder, RhythmBgmId)
def AddPresetId(builder, PresetId): builder.PrependInt64Slot(2, PresetId, 0)
def MiniGameRhythmExcelAddPresetId(builder, PresetId):
    """This method is deprecated. Please switch to AddPresetId."""
    return AddPresetId(builder, PresetId)
def AddStageDifficulty(builder, StageDifficulty): builder.PrependInt32Slot(3, StageDifficulty, 0)
def MiniGameRhythmExcelAddStageDifficulty(builder, StageDifficulty):
    """This method is deprecated. Please switch to AddStageDifficulty."""
    return AddStageDifficulty(builder, StageDifficulty)
def AddIsSpecial(builder, IsSpecial): builder.PrependBoolSlot(4, IsSpecial, 0)
def MiniGameRhythmExcelAddIsSpecial(builder, IsSpecial):
    """This method is deprecated. Please switch to AddIsSpecial."""
    return AddIsSpecial(builder, IsSpecial)
def AddOpenStageScoreAmount(builder, OpenStageScoreAmount): builder.PrependInt64Slot(5, OpenStageScoreAmount, 0)
def MiniGameRhythmExcelAddOpenStageScoreAmount(builder, OpenStageScoreAmount):
    """This method is deprecated. Please switch to AddOpenStageScoreAmount."""
    return AddOpenStageScoreAmount(builder, OpenStageScoreAmount)
def AddMaxHp(builder, MaxHp): builder.PrependInt64Slot(6, MaxHp, 0)
def MiniGameRhythmExcelAddMaxHp(builder, MaxHp):
    """This method is deprecated. Please switch to AddMaxHp."""
    return AddMaxHp(builder, MaxHp)
def AddMissDamage(builder, MissDamage): builder.PrependInt64Slot(7, MissDamage, 0)
def MiniGameRhythmExcelAddMissDamage(builder, MissDamage):
    """This method is deprecated. Please switch to AddMissDamage."""
    return AddMissDamage(builder, MissDamage)
def AddCriticalHPRestoreValue(builder, CriticalHPRestoreValue): builder.PrependInt64Slot(8, CriticalHPRestoreValue, 0)
def MiniGameRhythmExcelAddCriticalHPRestoreValue(builder, CriticalHPRestoreValue):
    """This method is deprecated. Please switch to AddCriticalHPRestoreValue."""
    return AddCriticalHPRestoreValue(builder, CriticalHPRestoreValue)
def AddMaxScore(builder, MaxScore): builder.PrependInt64Slot(9, MaxScore, 0)
def MiniGameRhythmExcelAddMaxScore(builder, MaxScore):
    """This method is deprecated. Please switch to AddMaxScore."""
    return AddMaxScore(builder, MaxScore)
def AddFeverScoreRate(builder, FeverScoreRate): builder.PrependInt64Slot(10, FeverScoreRate, 0)
def MiniGameRhythmExcelAddFeverScoreRate(builder, FeverScoreRate):
    """This method is deprecated. Please switch to AddFeverScoreRate."""
    return AddFeverScoreRate(builder, FeverScoreRate)
def AddNoteScoreRate(builder, NoteScoreRate): builder.PrependInt64Slot(11, NoteScoreRate, 0)
def MiniGameRhythmExcelAddNoteScoreRate(builder, NoteScoreRate):
    """This method is deprecated. Please switch to AddNoteScoreRate."""
    return AddNoteScoreRate(builder, NoteScoreRate)
def AddComboScoreRate(builder, ComboScoreRate): builder.PrependInt64Slot(12, ComboScoreRate, 0)
def MiniGameRhythmExcelAddComboScoreRate(builder, ComboScoreRate):
    """This method is deprecated. Please switch to AddComboScoreRate."""
    return AddComboScoreRate(builder, ComboScoreRate)
def AddAttackScoreRate(builder, AttackScoreRate): builder.PrependInt64Slot(13, AttackScoreRate, 0)
def MiniGameRhythmExcelAddAttackScoreRate(builder, AttackScoreRate):
    """This method is deprecated. Please switch to AddAttackScoreRate."""
    return AddAttackScoreRate(builder, AttackScoreRate)
def AddFeverCriticalRate(builder, FeverCriticalRate): builder.PrependFloat32Slot(14, FeverCriticalRate, 0.0)
def MiniGameRhythmExcelAddFeverCriticalRate(builder, FeverCriticalRate):
    """This method is deprecated. Please switch to AddFeverCriticalRate."""
    return AddFeverCriticalRate(builder, FeverCriticalRate)
def AddFeverAttackRate(builder, FeverAttackRate): builder.PrependFloat32Slot(15, FeverAttackRate, 0.0)
def MiniGameRhythmExcelAddFeverAttackRate(builder, FeverAttackRate):
    """This method is deprecated. Please switch to AddFeverAttackRate."""
    return AddFeverAttackRate(builder, FeverAttackRate)
def AddMaxHpScore(builder, MaxHpScore): builder.PrependInt64Slot(16, MaxHpScore, 0)
def MiniGameRhythmExcelAddMaxHpScore(builder, MaxHpScore):
    """This method is deprecated. Please switch to AddMaxHpScore."""
    return AddMaxHpScore(builder, MaxHpScore)
def AddRhythmFileName(builder, RhythmFileName): builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(RhythmFileName), 0)
def MiniGameRhythmExcelAddRhythmFileName(builder, RhythmFileName):
    """This method is deprecated. Please switch to AddRhythmFileName."""
    return AddRhythmFileName(builder, RhythmFileName)
def AddArtLevelSceneName(builder, ArtLevelSceneName): builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(ArtLevelSceneName), 0)
def MiniGameRhythmExcelAddArtLevelSceneName(builder, ArtLevelSceneName):
    """This method is deprecated. Please switch to AddArtLevelSceneName."""
    return AddArtLevelSceneName(builder, ArtLevelSceneName)
def AddComboImagePath(builder, ComboImagePath): builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(ComboImagePath), 0)
def MiniGameRhythmExcelAddComboImagePath(builder, ComboImagePath):
    """This method is deprecated. Please switch to AddComboImagePath."""
    return AddComboImagePath(builder, ComboImagePath)
def End(builder): return builder.EndObject()
def MiniGameRhythmExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)