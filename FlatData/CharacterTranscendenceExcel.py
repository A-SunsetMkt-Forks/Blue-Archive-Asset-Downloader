# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CharacterTranscendenceExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CharacterTranscendenceExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCharacterTranscendenceExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CharacterTranscendenceExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CharacterTranscendenceExcel
    def CharacterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterTranscendenceExcel
    def MaxFavorLevel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CharacterTranscendenceExcel
    def MaxFavorLevelAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # CharacterTranscendenceExcel
    def MaxFavorLevelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterTranscendenceExcel
    def MaxFavorLevelIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # CharacterTranscendenceExcel
    def StatBonusRateAttack(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # CharacterTranscendenceExcel
    def StatBonusRateAttackAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # CharacterTranscendenceExcel
    def StatBonusRateAttackLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterTranscendenceExcel
    def StatBonusRateAttackIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # CharacterTranscendenceExcel
    def StatBonusRateHP(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # CharacterTranscendenceExcel
    def StatBonusRateHPAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # CharacterTranscendenceExcel
    def StatBonusRateHPLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterTranscendenceExcel
    def StatBonusRateHPIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # CharacterTranscendenceExcel
    def StatBonusRateHeal(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # CharacterTranscendenceExcel
    def StatBonusRateHealAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # CharacterTranscendenceExcel
    def StatBonusRateHealLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterTranscendenceExcel
    def StatBonusRateHealIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # CharacterTranscendenceExcel
    def RecipeId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # CharacterTranscendenceExcel
    def RecipeIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # CharacterTranscendenceExcel
    def RecipeIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterTranscendenceExcel
    def RecipeIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # CharacterTranscendenceExcel
    def SkillGroupIdA(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CharacterTranscendenceExcel
    def SkillGroupIdALength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterTranscendenceExcel
    def SkillGroupIdAIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # CharacterTranscendenceExcel
    def SkillGroupIdB(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CharacterTranscendenceExcel
    def SkillGroupIdBLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterTranscendenceExcel
    def SkillGroupIdBIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # CharacterTranscendenceExcel
    def MaxlevelStar(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CharacterTranscendenceExcel
    def MaxlevelStarAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # CharacterTranscendenceExcel
    def MaxlevelStarLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterTranscendenceExcel
    def MaxlevelStarIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

def Start(builder): builder.StartObject(9)
def CharacterTranscendenceExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddCharacterId(builder, CharacterId): builder.PrependInt64Slot(0, CharacterId, 0)
def CharacterTranscendenceExcelAddCharacterId(builder, CharacterId):
    """This method is deprecated. Please switch to AddCharacterId."""
    return AddCharacterId(builder, CharacterId)
def AddMaxFavorLevel(builder, MaxFavorLevel): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(MaxFavorLevel), 0)
def CharacterTranscendenceExcelAddMaxFavorLevel(builder, MaxFavorLevel):
    """This method is deprecated. Please switch to AddMaxFavorLevel."""
    return AddMaxFavorLevel(builder, MaxFavorLevel)
def StartMaxFavorLevelVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterTranscendenceExcelStartMaxFavorLevelVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartMaxFavorLevelVector(builder, numElems)
def AddStatBonusRateAttack(builder, StatBonusRateAttack): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(StatBonusRateAttack), 0)
def CharacterTranscendenceExcelAddStatBonusRateAttack(builder, StatBonusRateAttack):
    """This method is deprecated. Please switch to AddStatBonusRateAttack."""
    return AddStatBonusRateAttack(builder, StatBonusRateAttack)
def StartStatBonusRateAttackVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def CharacterTranscendenceExcelStartStatBonusRateAttackVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartStatBonusRateAttackVector(builder, numElems)
def AddStatBonusRateHP(builder, StatBonusRateHP): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(StatBonusRateHP), 0)
def CharacterTranscendenceExcelAddStatBonusRateHP(builder, StatBonusRateHP):
    """This method is deprecated. Please switch to AddStatBonusRateHP."""
    return AddStatBonusRateHP(builder, StatBonusRateHP)
def StartStatBonusRateHPVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def CharacterTranscendenceExcelStartStatBonusRateHPVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartStatBonusRateHPVector(builder, numElems)
def AddStatBonusRateHeal(builder, StatBonusRateHeal): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(StatBonusRateHeal), 0)
def CharacterTranscendenceExcelAddStatBonusRateHeal(builder, StatBonusRateHeal):
    """This method is deprecated. Please switch to AddStatBonusRateHeal."""
    return AddStatBonusRateHeal(builder, StatBonusRateHeal)
def StartStatBonusRateHealVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def CharacterTranscendenceExcelStartStatBonusRateHealVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartStatBonusRateHealVector(builder, numElems)
def AddRecipeId(builder, RecipeId): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(RecipeId), 0)
def CharacterTranscendenceExcelAddRecipeId(builder, RecipeId):
    """This method is deprecated. Please switch to AddRecipeId."""
    return AddRecipeId(builder, RecipeId)
def StartRecipeIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def CharacterTranscendenceExcelStartRecipeIdVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartRecipeIdVector(builder, numElems)
def AddSkillGroupIdA(builder, SkillGroupIdA): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(SkillGroupIdA), 0)
def CharacterTranscendenceExcelAddSkillGroupIdA(builder, SkillGroupIdA):
    """This method is deprecated. Please switch to AddSkillGroupIdA."""
    return AddSkillGroupIdA(builder, SkillGroupIdA)
def StartSkillGroupIdAVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterTranscendenceExcelStartSkillGroupIdAVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartSkillGroupIdAVector(builder, numElems)
def AddSkillGroupIdB(builder, SkillGroupIdB): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(SkillGroupIdB), 0)
def CharacterTranscendenceExcelAddSkillGroupIdB(builder, SkillGroupIdB):
    """This method is deprecated. Please switch to AddSkillGroupIdB."""
    return AddSkillGroupIdB(builder, SkillGroupIdB)
def StartSkillGroupIdBVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterTranscendenceExcelStartSkillGroupIdBVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartSkillGroupIdBVector(builder, numElems)
def AddMaxlevelStar(builder, MaxlevelStar): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(MaxlevelStar), 0)
def CharacterTranscendenceExcelAddMaxlevelStar(builder, MaxlevelStar):
    """This method is deprecated. Please switch to AddMaxlevelStar."""
    return AddMaxlevelStar(builder, MaxlevelStar)
def StartMaxlevelStarVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterTranscendenceExcelStartMaxlevelStarVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartMaxlevelStarVector(builder, numElems)
def End(builder): return builder.EndObject()
def CharacterTranscendenceExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)