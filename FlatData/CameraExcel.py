# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CameraExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CameraExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCameraExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CameraExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CameraExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CameraExcel
    def MinDistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CameraExcel
    def MaxDistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CameraExcel
    def RotationX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CameraExcel
    def RotationY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CameraExcel
    def MoveInstantly(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CameraExcel
    def LeftMargin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CameraExcel
    def BottomMargin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CameraExcel
    def IgnoreEnemies(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CameraExcel
    def UseRailPointCompensation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def Start(builder): builder.StartObject(10)
def CameraExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddUniqueId(builder, UniqueId): builder.PrependInt64Slot(0, UniqueId, 0)
def CameraExcelAddUniqueId(builder, UniqueId):
    """This method is deprecated. Please switch to AddUniqueId."""
    return AddUniqueId(builder, UniqueId)
def AddMinDistance(builder, MinDistance): builder.PrependFloat32Slot(1, MinDistance, 0.0)
def CameraExcelAddMinDistance(builder, MinDistance):
    """This method is deprecated. Please switch to AddMinDistance."""
    return AddMinDistance(builder, MinDistance)
def AddMaxDistance(builder, MaxDistance): builder.PrependFloat32Slot(2, MaxDistance, 0.0)
def CameraExcelAddMaxDistance(builder, MaxDistance):
    """This method is deprecated. Please switch to AddMaxDistance."""
    return AddMaxDistance(builder, MaxDistance)
def AddRotationX(builder, RotationX): builder.PrependFloat32Slot(3, RotationX, 0.0)
def CameraExcelAddRotationX(builder, RotationX):
    """This method is deprecated. Please switch to AddRotationX."""
    return AddRotationX(builder, RotationX)
def AddRotationY(builder, RotationY): builder.PrependFloat32Slot(4, RotationY, 0.0)
def CameraExcelAddRotationY(builder, RotationY):
    """This method is deprecated. Please switch to AddRotationY."""
    return AddRotationY(builder, RotationY)
def AddMoveInstantly(builder, MoveInstantly): builder.PrependBoolSlot(5, MoveInstantly, 0)
def CameraExcelAddMoveInstantly(builder, MoveInstantly):
    """This method is deprecated. Please switch to AddMoveInstantly."""
    return AddMoveInstantly(builder, MoveInstantly)
def AddLeftMargin(builder, LeftMargin): builder.PrependFloat32Slot(6, LeftMargin, 0.0)
def CameraExcelAddLeftMargin(builder, LeftMargin):
    """This method is deprecated. Please switch to AddLeftMargin."""
    return AddLeftMargin(builder, LeftMargin)
def AddBottomMargin(builder, BottomMargin): builder.PrependFloat32Slot(7, BottomMargin, 0.0)
def CameraExcelAddBottomMargin(builder, BottomMargin):
    """This method is deprecated. Please switch to AddBottomMargin."""
    return AddBottomMargin(builder, BottomMargin)
def AddIgnoreEnemies(builder, IgnoreEnemies): builder.PrependBoolSlot(8, IgnoreEnemies, 0)
def CameraExcelAddIgnoreEnemies(builder, IgnoreEnemies):
    """This method is deprecated. Please switch to AddIgnoreEnemies."""
    return AddIgnoreEnemies(builder, IgnoreEnemies)
def AddUseRailPointCompensation(builder, UseRailPointCompensation): builder.PrependBoolSlot(9, UseRailPointCompensation, 0)
def CameraExcelAddUseRailPointCompensation(builder, UseRailPointCompensation):
    """This method is deprecated. Please switch to AddUseRailPointCompensation."""
    return AddUseRailPointCompensation(builder, UseRailPointCompensation)
def End(builder): return builder.EndObject()
def CameraExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)