# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ToastExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ToastExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsToastExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ToastExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ToastExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ToastExcel
    def ToastType_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ToastExcel
    def MissionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ToastExcel
    def TextId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ToastExcel
    def LifeTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(5)
def ToastExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddId(builder, Id): builder.PrependUint32Slot(0, Id, 0)
def ToastExcelAddId(builder, Id):
    """This method is deprecated. Please switch to AddId."""
    return AddId(builder, Id)
def AddToastType_(builder, ToastType_): builder.PrependInt32Slot(1, ToastType_, 0)
def ToastExcelAddToastType_(builder, ToastType_):
    """This method is deprecated. Please switch to AddToastType_."""
    return AddToastType_(builder, ToastType_)
def AddMissionId(builder, MissionId): builder.PrependUint32Slot(2, MissionId, 0)
def ToastExcelAddMissionId(builder, MissionId):
    """This method is deprecated. Please switch to AddMissionId."""
    return AddMissionId(builder, MissionId)
def AddTextId(builder, TextId): builder.PrependUint32Slot(3, TextId, 0)
def ToastExcelAddTextId(builder, TextId):
    """This method is deprecated. Please switch to AddTextId."""
    return AddTextId(builder, TextId)
def AddLifeTime(builder, LifeTime): builder.PrependInt64Slot(4, LifeTime, 0)
def ToastExcelAddLifeTime(builder, LifeTime):
    """This method is deprecated. Please switch to AddLifeTime."""
    return AddLifeTime(builder, LifeTime)
def End(builder): return builder.EndObject()
def ToastExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)