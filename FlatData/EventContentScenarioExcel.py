# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EventContentScenarioExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EventContentScenarioExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEventContentScenarioExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EventContentScenarioExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EventContentScenarioExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentScenarioExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentScenarioExcel
    def Order(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentScenarioExcel
    def RecollectionNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentScenarioExcel
    def IsRecollection(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # EventContentScenarioExcel
    def ScenarioGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EventContentScenarioExcel
    def ScenarioGroupIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EventContentScenarioExcel
    def ScenarioGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentScenarioExcel
    def ScenarioGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # EventContentScenarioExcel
    def ScenarioConditionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentScenarioExcel
    def ConditionAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentScenarioExcel
    def ClearedScenarioGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentScenarioExcel
    def RecollectionSummaryLocalizeScenarioId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EventContentScenarioExcel
    def RecollectionResource(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentScenarioExcel
    def IsRecollectionHorizon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # EventContentScenarioExcel
    def CostParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentScenarioExcel
    def CostId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentScenarioExcel
    def CostAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentScenarioExcel
    def RewardParcelType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EventContentScenarioExcel
    def RewardParcelTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # EventContentScenarioExcel
    def RewardParcelTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentScenarioExcel
    def RewardParcelTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # EventContentScenarioExcel
    def RewardId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EventContentScenarioExcel
    def RewardIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EventContentScenarioExcel
    def RewardIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentScenarioExcel
    def RewardIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

    # EventContentScenarioExcel
    def RewardAmount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EventContentScenarioExcel
    def RewardAmountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # EventContentScenarioExcel
    def RewardAmountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentScenarioExcel
    def RewardAmountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        return o == 0

def Start(builder): builder.StartObject(18)
def EventContentScenarioExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddId(builder, Id): builder.PrependInt64Slot(0, Id, 0)
def EventContentScenarioExcelAddId(builder, Id):
    """This method is deprecated. Please switch to AddId."""
    return AddId(builder, Id)
def AddEventContentId(builder, EventContentId): builder.PrependInt64Slot(1, EventContentId, 0)
def EventContentScenarioExcelAddEventContentId(builder, EventContentId):
    """This method is deprecated. Please switch to AddEventContentId."""
    return AddEventContentId(builder, EventContentId)
def AddOrder(builder, Order): builder.PrependInt64Slot(2, Order, 0)
def EventContentScenarioExcelAddOrder(builder, Order):
    """This method is deprecated. Please switch to AddOrder."""
    return AddOrder(builder, Order)
def AddRecollectionNumber(builder, RecollectionNumber): builder.PrependInt64Slot(3, RecollectionNumber, 0)
def EventContentScenarioExcelAddRecollectionNumber(builder, RecollectionNumber):
    """This method is deprecated. Please switch to AddRecollectionNumber."""
    return AddRecollectionNumber(builder, RecollectionNumber)
def AddIsRecollection(builder, IsRecollection): builder.PrependBoolSlot(4, IsRecollection, 0)
def EventContentScenarioExcelAddIsRecollection(builder, IsRecollection):
    """This method is deprecated. Please switch to AddIsRecollection."""
    return AddIsRecollection(builder, IsRecollection)
def AddScenarioGroupId(builder, ScenarioGroupId): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(ScenarioGroupId), 0)
def EventContentScenarioExcelAddScenarioGroupId(builder, ScenarioGroupId):
    """This method is deprecated. Please switch to AddScenarioGroupId."""
    return AddScenarioGroupId(builder, ScenarioGroupId)
def StartScenarioGroupIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def EventContentScenarioExcelStartScenarioGroupIdVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartScenarioGroupIdVector(builder, numElems)
def AddScenarioConditionType(builder, ScenarioConditionType): builder.PrependInt32Slot(6, ScenarioConditionType, 0)
def EventContentScenarioExcelAddScenarioConditionType(builder, ScenarioConditionType):
    """This method is deprecated. Please switch to AddScenarioConditionType."""
    return AddScenarioConditionType(builder, ScenarioConditionType)
def AddConditionAmount(builder, ConditionAmount): builder.PrependInt64Slot(7, ConditionAmount, 0)
def EventContentScenarioExcelAddConditionAmount(builder, ConditionAmount):
    """This method is deprecated. Please switch to AddConditionAmount."""
    return AddConditionAmount(builder, ConditionAmount)
def AddClearedScenarioGroupId(builder, ClearedScenarioGroupId): builder.PrependInt64Slot(8, ClearedScenarioGroupId, 0)
def EventContentScenarioExcelAddClearedScenarioGroupId(builder, ClearedScenarioGroupId):
    """This method is deprecated. Please switch to AddClearedScenarioGroupId."""
    return AddClearedScenarioGroupId(builder, ClearedScenarioGroupId)
def AddRecollectionSummaryLocalizeScenarioId(builder, RecollectionSummaryLocalizeScenarioId): builder.PrependUint32Slot(9, RecollectionSummaryLocalizeScenarioId, 0)
def EventContentScenarioExcelAddRecollectionSummaryLocalizeScenarioId(builder, RecollectionSummaryLocalizeScenarioId):
    """This method is deprecated. Please switch to AddRecollectionSummaryLocalizeScenarioId."""
    return AddRecollectionSummaryLocalizeScenarioId(builder, RecollectionSummaryLocalizeScenarioId)
def AddRecollectionResource(builder, RecollectionResource): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(RecollectionResource), 0)
def EventContentScenarioExcelAddRecollectionResource(builder, RecollectionResource):
    """This method is deprecated. Please switch to AddRecollectionResource."""
    return AddRecollectionResource(builder, RecollectionResource)
def AddIsRecollectionHorizon(builder, IsRecollectionHorizon): builder.PrependBoolSlot(11, IsRecollectionHorizon, 0)
def EventContentScenarioExcelAddIsRecollectionHorizon(builder, IsRecollectionHorizon):
    """This method is deprecated. Please switch to AddIsRecollectionHorizon."""
    return AddIsRecollectionHorizon(builder, IsRecollectionHorizon)
def AddCostParcelType(builder, CostParcelType): builder.PrependInt32Slot(12, CostParcelType, 0)
def EventContentScenarioExcelAddCostParcelType(builder, CostParcelType):
    """This method is deprecated. Please switch to AddCostParcelType."""
    return AddCostParcelType(builder, CostParcelType)
def AddCostId(builder, CostId): builder.PrependInt64Slot(13, CostId, 0)
def EventContentScenarioExcelAddCostId(builder, CostId):
    """This method is deprecated. Please switch to AddCostId."""
    return AddCostId(builder, CostId)
def AddCostAmount(builder, CostAmount): builder.PrependInt32Slot(14, CostAmount, 0)
def EventContentScenarioExcelAddCostAmount(builder, CostAmount):
    """This method is deprecated. Please switch to AddCostAmount."""
    return AddCostAmount(builder, CostAmount)
def AddRewardParcelType(builder, RewardParcelType): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(RewardParcelType), 0)
def EventContentScenarioExcelAddRewardParcelType(builder, RewardParcelType):
    """This method is deprecated. Please switch to AddRewardParcelType."""
    return AddRewardParcelType(builder, RewardParcelType)
def StartRewardParcelTypeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EventContentScenarioExcelStartRewardParcelTypeVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartRewardParcelTypeVector(builder, numElems)
def AddRewardId(builder, RewardId): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(RewardId), 0)
def EventContentScenarioExcelAddRewardId(builder, RewardId):
    """This method is deprecated. Please switch to AddRewardId."""
    return AddRewardId(builder, RewardId)
def StartRewardIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def EventContentScenarioExcelStartRewardIdVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartRewardIdVector(builder, numElems)
def AddRewardAmount(builder, RewardAmount): builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(RewardAmount), 0)
def EventContentScenarioExcelAddRewardAmount(builder, RewardAmount):
    """This method is deprecated. Please switch to AddRewardAmount."""
    return AddRewardAmount(builder, RewardAmount)
def StartRewardAmountVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EventContentScenarioExcelStartRewardAmountVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartRewardAmountVector(builder, numElems)
def End(builder): return builder.EndObject()
def EventContentScenarioExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)