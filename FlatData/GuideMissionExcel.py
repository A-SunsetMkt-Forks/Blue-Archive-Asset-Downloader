# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class GuideMissionExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GuideMissionExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGuideMissionExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # GuideMissionExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GuideMissionExcel
    def SeasonId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # GuideMissionExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # GuideMissionExcel
    def Category(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GuideMissionExcel
    def IsLegacy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # GuideMissionExcel
    def LoginCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # GuideMissionExcel
    def PreMissionId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # GuideMissionExcel
    def PreMissionIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # GuideMissionExcel
    def PreMissionIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GuideMissionExcel
    def PreMissionIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # GuideMissionExcel
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # GuideMissionExcel
    def ShortcutUI(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # GuideMissionExcel
    def ShortcutUILength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GuideMissionExcel
    def ShortcutUIIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # GuideMissionExcel
    def CompleteConditionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GuideMissionExcel
    def CompleteConditionCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # GuideMissionExcel
    def CompleteConditionParameter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # GuideMissionExcel
    def CompleteConditionParameterAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # GuideMissionExcel
    def CompleteConditionParameterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GuideMissionExcel
    def CompleteConditionParameterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # GuideMissionExcel
    def CompleteConditionParameterName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # GuideMissionExcel
    def MissionRewardParcelType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # GuideMissionExcel
    def MissionRewardParcelTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # GuideMissionExcel
    def MissionRewardParcelTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GuideMissionExcel
    def MissionRewardParcelTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # GuideMissionExcel
    def MissionRewardParcelId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # GuideMissionExcel
    def MissionRewardParcelIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # GuideMissionExcel
    def MissionRewardParcelIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GuideMissionExcel
    def MissionRewardParcelIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # GuideMissionExcel
    def MissionRewardAmount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # GuideMissionExcel
    def MissionRewardAmountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # GuideMissionExcel
    def MissionRewardAmountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GuideMissionExcel
    def MissionRewardAmountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

def Start(builder): builder.StartObject(15)
def GuideMissionExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddSeasonId(builder, SeasonId): builder.PrependInt64Slot(0, SeasonId, 0)
def GuideMissionExcelAddSeasonId(builder, SeasonId):
    """This method is deprecated. Please switch to AddSeasonId."""
    return AddSeasonId(builder, SeasonId)
def AddId(builder, Id): builder.PrependInt64Slot(1, Id, 0)
def GuideMissionExcelAddId(builder, Id):
    """This method is deprecated. Please switch to AddId."""
    return AddId(builder, Id)
def AddCategory(builder, Category): builder.PrependInt32Slot(2, Category, 0)
def GuideMissionExcelAddCategory(builder, Category):
    """This method is deprecated. Please switch to AddCategory."""
    return AddCategory(builder, Category)
def AddIsLegacy(builder, IsLegacy): builder.PrependBoolSlot(3, IsLegacy, 0)
def GuideMissionExcelAddIsLegacy(builder, IsLegacy):
    """This method is deprecated. Please switch to AddIsLegacy."""
    return AddIsLegacy(builder, IsLegacy)
def AddLoginCount(builder, LoginCount): builder.PrependInt64Slot(4, LoginCount, 0)
def GuideMissionExcelAddLoginCount(builder, LoginCount):
    """This method is deprecated. Please switch to AddLoginCount."""
    return AddLoginCount(builder, LoginCount)
def AddPreMissionId(builder, PreMissionId): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(PreMissionId), 0)
def GuideMissionExcelAddPreMissionId(builder, PreMissionId):
    """This method is deprecated. Please switch to AddPreMissionId."""
    return AddPreMissionId(builder, PreMissionId)
def StartPreMissionIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def GuideMissionExcelStartPreMissionIdVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartPreMissionIdVector(builder, numElems)
def AddDescription(builder, Description): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(Description), 0)
def GuideMissionExcelAddDescription(builder, Description):
    """This method is deprecated. Please switch to AddDescription."""
    return AddDescription(builder, Description)
def AddShortcutUI(builder, ShortcutUI): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(ShortcutUI), 0)
def GuideMissionExcelAddShortcutUI(builder, ShortcutUI):
    """This method is deprecated. Please switch to AddShortcutUI."""
    return AddShortcutUI(builder, ShortcutUI)
def StartShortcutUIVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def GuideMissionExcelStartShortcutUIVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartShortcutUIVector(builder, numElems)
def AddCompleteConditionType(builder, CompleteConditionType): builder.PrependInt32Slot(8, CompleteConditionType, 0)
def GuideMissionExcelAddCompleteConditionType(builder, CompleteConditionType):
    """This method is deprecated. Please switch to AddCompleteConditionType."""
    return AddCompleteConditionType(builder, CompleteConditionType)
def AddCompleteConditionCount(builder, CompleteConditionCount): builder.PrependInt64Slot(9, CompleteConditionCount, 0)
def GuideMissionExcelAddCompleteConditionCount(builder, CompleteConditionCount):
    """This method is deprecated. Please switch to AddCompleteConditionCount."""
    return AddCompleteConditionCount(builder, CompleteConditionCount)
def AddCompleteConditionParameter(builder, CompleteConditionParameter): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(CompleteConditionParameter), 0)
def GuideMissionExcelAddCompleteConditionParameter(builder, CompleteConditionParameter):
    """This method is deprecated. Please switch to AddCompleteConditionParameter."""
    return AddCompleteConditionParameter(builder, CompleteConditionParameter)
def StartCompleteConditionParameterVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def GuideMissionExcelStartCompleteConditionParameterVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartCompleteConditionParameterVector(builder, numElems)
def AddCompleteConditionParameterName(builder, CompleteConditionParameterName): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(CompleteConditionParameterName), 0)
def GuideMissionExcelAddCompleteConditionParameterName(builder, CompleteConditionParameterName):
    """This method is deprecated. Please switch to AddCompleteConditionParameterName."""
    return AddCompleteConditionParameterName(builder, CompleteConditionParameterName)
def AddMissionRewardParcelType(builder, MissionRewardParcelType): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(MissionRewardParcelType), 0)
def GuideMissionExcelAddMissionRewardParcelType(builder, MissionRewardParcelType):
    """This method is deprecated. Please switch to AddMissionRewardParcelType."""
    return AddMissionRewardParcelType(builder, MissionRewardParcelType)
def StartMissionRewardParcelTypeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def GuideMissionExcelStartMissionRewardParcelTypeVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartMissionRewardParcelTypeVector(builder, numElems)
def AddMissionRewardParcelId(builder, MissionRewardParcelId): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(MissionRewardParcelId), 0)
def GuideMissionExcelAddMissionRewardParcelId(builder, MissionRewardParcelId):
    """This method is deprecated. Please switch to AddMissionRewardParcelId."""
    return AddMissionRewardParcelId(builder, MissionRewardParcelId)
def StartMissionRewardParcelIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def GuideMissionExcelStartMissionRewardParcelIdVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartMissionRewardParcelIdVector(builder, numElems)
def AddMissionRewardAmount(builder, MissionRewardAmount): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(MissionRewardAmount), 0)
def GuideMissionExcelAddMissionRewardAmount(builder, MissionRewardAmount):
    """This method is deprecated. Please switch to AddMissionRewardAmount."""
    return AddMissionRewardAmount(builder, MissionRewardAmount)
def StartMissionRewardAmountVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def GuideMissionExcelStartMissionRewardAmountVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartMissionRewardAmountVector(builder, numElems)
def End(builder): return builder.EndObject()
def GuideMissionExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)