# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SkillExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SkillExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSkillExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SkillExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SkillExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def LocalizeSkillId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SkillExcel
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def SkillCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def EnemySkillCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def BulletType_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def StartCoolTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def CoolTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def EnemyStartCoolTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def EnemyCoolTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def UseAtg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def RequireCharacterLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def RequireLevelUpMaterial(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def IconName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SkillExcel
    def IsShowInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def Start(builder): builder.StartObject(16)
def SkillExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddId(builder, Id): builder.PrependInt64Slot(0, Id, 0)
def SkillExcelAddId(builder, Id):
    """This method is deprecated. Please switch to AddId."""
    return AddId(builder, Id)
def AddLocalizeSkillId(builder, LocalizeSkillId): builder.PrependUint32Slot(1, LocalizeSkillId, 0)
def SkillExcelAddLocalizeSkillId(builder, LocalizeSkillId):
    """This method is deprecated. Please switch to AddLocalizeSkillId."""
    return AddLocalizeSkillId(builder, LocalizeSkillId)
def AddGroupId(builder, GroupId): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(GroupId), 0)
def SkillExcelAddGroupId(builder, GroupId):
    """This method is deprecated. Please switch to AddGroupId."""
    return AddGroupId(builder, GroupId)
def AddLevel(builder, Level): builder.PrependInt32Slot(3, Level, 0)
def SkillExcelAddLevel(builder, Level):
    """This method is deprecated. Please switch to AddLevel."""
    return AddLevel(builder, Level)
def AddSkillCost(builder, SkillCost): builder.PrependInt32Slot(4, SkillCost, 0)
def SkillExcelAddSkillCost(builder, SkillCost):
    """This method is deprecated. Please switch to AddSkillCost."""
    return AddSkillCost(builder, SkillCost)
def AddEnemySkillCost(builder, EnemySkillCost): builder.PrependInt32Slot(5, EnemySkillCost, 0)
def SkillExcelAddEnemySkillCost(builder, EnemySkillCost):
    """This method is deprecated. Please switch to AddEnemySkillCost."""
    return AddEnemySkillCost(builder, EnemySkillCost)
def AddBulletType_(builder, BulletType_): builder.PrependInt32Slot(6, BulletType_, 0)
def SkillExcelAddBulletType_(builder, BulletType_):
    """This method is deprecated. Please switch to AddBulletType_."""
    return AddBulletType_(builder, BulletType_)
def AddStartCoolTime(builder, StartCoolTime): builder.PrependInt32Slot(7, StartCoolTime, 0)
def SkillExcelAddStartCoolTime(builder, StartCoolTime):
    """This method is deprecated. Please switch to AddStartCoolTime."""
    return AddStartCoolTime(builder, StartCoolTime)
def AddCoolTime(builder, CoolTime): builder.PrependInt32Slot(8, CoolTime, 0)
def SkillExcelAddCoolTime(builder, CoolTime):
    """This method is deprecated. Please switch to AddCoolTime."""
    return AddCoolTime(builder, CoolTime)
def AddEnemyStartCoolTime(builder, EnemyStartCoolTime): builder.PrependInt32Slot(9, EnemyStartCoolTime, 0)
def SkillExcelAddEnemyStartCoolTime(builder, EnemyStartCoolTime):
    """This method is deprecated. Please switch to AddEnemyStartCoolTime."""
    return AddEnemyStartCoolTime(builder, EnemyStartCoolTime)
def AddEnemyCoolTime(builder, EnemyCoolTime): builder.PrependInt32Slot(10, EnemyCoolTime, 0)
def SkillExcelAddEnemyCoolTime(builder, EnemyCoolTime):
    """This method is deprecated. Please switch to AddEnemyCoolTime."""
    return AddEnemyCoolTime(builder, EnemyCoolTime)
def AddUseAtg(builder, UseAtg): builder.PrependInt32Slot(11, UseAtg, 0)
def SkillExcelAddUseAtg(builder, UseAtg):
    """This method is deprecated. Please switch to AddUseAtg."""
    return AddUseAtg(builder, UseAtg)
def AddRequireCharacterLevel(builder, RequireCharacterLevel): builder.PrependInt32Slot(12, RequireCharacterLevel, 0)
def SkillExcelAddRequireCharacterLevel(builder, RequireCharacterLevel):
    """This method is deprecated. Please switch to AddRequireCharacterLevel."""
    return AddRequireCharacterLevel(builder, RequireCharacterLevel)
def AddRequireLevelUpMaterial(builder, RequireLevelUpMaterial): builder.PrependInt64Slot(13, RequireLevelUpMaterial, 0)
def SkillExcelAddRequireLevelUpMaterial(builder, RequireLevelUpMaterial):
    """This method is deprecated. Please switch to AddRequireLevelUpMaterial."""
    return AddRequireLevelUpMaterial(builder, RequireLevelUpMaterial)
def AddIconName(builder, IconName): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(IconName), 0)
def SkillExcelAddIconName(builder, IconName):
    """This method is deprecated. Please switch to AddIconName."""
    return AddIconName(builder, IconName)
def AddIsShowInfo(builder, IsShowInfo): builder.PrependBoolSlot(15, IsShowInfo, 0)
def SkillExcelAddIsShowInfo(builder, IsShowInfo):
    """This method is deprecated. Please switch to AddIsShowInfo."""
    return AddIsShowInfo(builder, IsShowInfo)
def End(builder): return builder.EndObject()
def SkillExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)