# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FurnitureGroupExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FurnitureGroupExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFurnitureGroupExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FurnitureGroupExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FurnitureGroupExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FurnitureGroupExcel
    def GroupNameLocalize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FurnitureGroupExcel
    def LocalizeEtcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FurnitureGroupExcel
    def RequiredFurnitureCount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FurnitureGroupExcel
    def RequiredFurnitureCountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # FurnitureGroupExcel
    def RequiredFurnitureCountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FurnitureGroupExcel
    def RequiredFurnitureCountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # FurnitureGroupExcel
    def ComfortBonus(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FurnitureGroupExcel
    def ComfortBonusAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # FurnitureGroupExcel
    def ComfortBonusLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FurnitureGroupExcel
    def ComfortBonusIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def Start(builder): builder.StartObject(5)
def FurnitureGroupExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddId(builder, Id): builder.PrependInt64Slot(0, Id, 0)
def FurnitureGroupExcelAddId(builder, Id):
    """This method is deprecated. Please switch to AddId."""
    return AddId(builder, Id)
def AddGroupNameLocalize(builder, GroupNameLocalize): builder.PrependUint32Slot(1, GroupNameLocalize, 0)
def FurnitureGroupExcelAddGroupNameLocalize(builder, GroupNameLocalize):
    """This method is deprecated. Please switch to AddGroupNameLocalize."""
    return AddGroupNameLocalize(builder, GroupNameLocalize)
def AddLocalizeEtcId(builder, LocalizeEtcId): builder.PrependUint32Slot(2, LocalizeEtcId, 0)
def FurnitureGroupExcelAddLocalizeEtcId(builder, LocalizeEtcId):
    """This method is deprecated. Please switch to AddLocalizeEtcId."""
    return AddLocalizeEtcId(builder, LocalizeEtcId)
def AddRequiredFurnitureCount(builder, RequiredFurnitureCount): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(RequiredFurnitureCount), 0)
def FurnitureGroupExcelAddRequiredFurnitureCount(builder, RequiredFurnitureCount):
    """This method is deprecated. Please switch to AddRequiredFurnitureCount."""
    return AddRequiredFurnitureCount(builder, RequiredFurnitureCount)
def StartRequiredFurnitureCountVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FurnitureGroupExcelStartRequiredFurnitureCountVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartRequiredFurnitureCountVector(builder, numElems)
def AddComfortBonus(builder, ComfortBonus): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(ComfortBonus), 0)
def FurnitureGroupExcelAddComfortBonus(builder, ComfortBonus):
    """This method is deprecated. Please switch to AddComfortBonus."""
    return AddComfortBonus(builder, ComfortBonus)
def StartComfortBonusVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def FurnitureGroupExcelStartComfortBonusVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartComfortBonusVector(builder, numElems)
def End(builder): return builder.EndObject()
def FurnitureGroupExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)