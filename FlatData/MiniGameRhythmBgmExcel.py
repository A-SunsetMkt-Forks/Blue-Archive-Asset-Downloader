# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MiniGameRhythmBgmExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MiniGameRhythmBgmExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMiniGameRhythmBgmExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MiniGameRhythmBgmExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MiniGameRhythmBgmExcel
    def RhythmBgmId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmBgmExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmBgmExcel
    def StageSelectImagePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MiniGameRhythmBgmExcel
    def Bpm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmBgmExcel
    def Bgm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameRhythmBgmExcel
    def BgmNameText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MiniGameRhythmBgmExcel
    def BgmComposerText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MiniGameRhythmBgmExcel
    def BgmLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(8)
def MiniGameRhythmBgmExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddRhythmBgmId(builder, RhythmBgmId): builder.PrependInt64Slot(0, RhythmBgmId, 0)
def MiniGameRhythmBgmExcelAddRhythmBgmId(builder, RhythmBgmId):
    """This method is deprecated. Please switch to AddRhythmBgmId."""
    return AddRhythmBgmId(builder, RhythmBgmId)
def AddEventContentId(builder, EventContentId): builder.PrependInt64Slot(1, EventContentId, 0)
def MiniGameRhythmBgmExcelAddEventContentId(builder, EventContentId):
    """This method is deprecated. Please switch to AddEventContentId."""
    return AddEventContentId(builder, EventContentId)
def AddStageSelectImagePath(builder, StageSelectImagePath): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(StageSelectImagePath), 0)
def MiniGameRhythmBgmExcelAddStageSelectImagePath(builder, StageSelectImagePath):
    """This method is deprecated. Please switch to AddStageSelectImagePath."""
    return AddStageSelectImagePath(builder, StageSelectImagePath)
def AddBpm(builder, Bpm): builder.PrependInt64Slot(3, Bpm, 0)
def MiniGameRhythmBgmExcelAddBpm(builder, Bpm):
    """This method is deprecated. Please switch to AddBpm."""
    return AddBpm(builder, Bpm)
def AddBgm(builder, Bgm): builder.PrependInt64Slot(4, Bgm, 0)
def MiniGameRhythmBgmExcelAddBgm(builder, Bgm):
    """This method is deprecated. Please switch to AddBgm."""
    return AddBgm(builder, Bgm)
def AddBgmNameText(builder, BgmNameText): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(BgmNameText), 0)
def MiniGameRhythmBgmExcelAddBgmNameText(builder, BgmNameText):
    """This method is deprecated. Please switch to AddBgmNameText."""
    return AddBgmNameText(builder, BgmNameText)
def AddBgmComposerText(builder, BgmComposerText): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(BgmComposerText), 0)
def MiniGameRhythmBgmExcelAddBgmComposerText(builder, BgmComposerText):
    """This method is deprecated. Please switch to AddBgmComposerText."""
    return AddBgmComposerText(builder, BgmComposerText)
def AddBgmLength(builder, BgmLength): builder.PrependInt32Slot(7, BgmLength, 0)
def MiniGameRhythmBgmExcelAddBgmLength(builder, BgmLength):
    """This method is deprecated. Please switch to AddBgmLength."""
    return AddBgmLength(builder, BgmLength)
def End(builder): return builder.EndObject()
def MiniGameRhythmBgmExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)