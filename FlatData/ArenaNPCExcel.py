# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ArenaNPCExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ArenaNPCExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsArenaNPCExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ArenaNPCExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ArenaNPCExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ArenaNPCExcel
    def Rank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ArenaNPCExcel
    def NPCAccountLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ArenaNPCExcel
    def NPCLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ArenaNPCExcel
    def NPCLevelDeviation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ArenaNPCExcel
    def NPCStarGrade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ArenaNPCExcel
    def UseTSS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ArenaNPCExcel
    def ExceptionCharacterRarities(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # ArenaNPCExcel
    def ExceptionCharacterRaritiesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # ArenaNPCExcel
    def ExceptionCharacterRaritiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ArenaNPCExcel
    def ExceptionCharacterRaritiesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # ArenaNPCExcel
    def ExceptionMainCharacterIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # ArenaNPCExcel
    def ExceptionMainCharacterIdsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # ArenaNPCExcel
    def ExceptionMainCharacterIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ArenaNPCExcel
    def ExceptionMainCharacterIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # ArenaNPCExcel
    def ExceptionSupportCharacterIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # ArenaNPCExcel
    def ExceptionSupportCharacterIdsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # ArenaNPCExcel
    def ExceptionSupportCharacterIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ArenaNPCExcel
    def ExceptionSupportCharacterIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # ArenaNPCExcel
    def ExceptionTSSIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # ArenaNPCExcel
    def ExceptionTSSIdsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # ArenaNPCExcel
    def ExceptionTSSIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ArenaNPCExcel
    def ExceptionTSSIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

def Start(builder): builder.StartObject(11)
def ArenaNPCExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddUniqueId(builder, UniqueId): builder.PrependInt64Slot(0, UniqueId, 0)
def ArenaNPCExcelAddUniqueId(builder, UniqueId):
    """This method is deprecated. Please switch to AddUniqueId."""
    return AddUniqueId(builder, UniqueId)
def AddRank(builder, Rank): builder.PrependInt64Slot(1, Rank, 0)
def ArenaNPCExcelAddRank(builder, Rank):
    """This method is deprecated. Please switch to AddRank."""
    return AddRank(builder, Rank)
def AddNPCAccountLevel(builder, NPCAccountLevel): builder.PrependInt64Slot(2, NPCAccountLevel, 0)
def ArenaNPCExcelAddNPCAccountLevel(builder, NPCAccountLevel):
    """This method is deprecated. Please switch to AddNPCAccountLevel."""
    return AddNPCAccountLevel(builder, NPCAccountLevel)
def AddNPCLevel(builder, NPCLevel): builder.PrependInt64Slot(3, NPCLevel, 0)
def ArenaNPCExcelAddNPCLevel(builder, NPCLevel):
    """This method is deprecated. Please switch to AddNPCLevel."""
    return AddNPCLevel(builder, NPCLevel)
def AddNPCLevelDeviation(builder, NPCLevelDeviation): builder.PrependInt64Slot(4, NPCLevelDeviation, 0)
def ArenaNPCExcelAddNPCLevelDeviation(builder, NPCLevelDeviation):
    """This method is deprecated. Please switch to AddNPCLevelDeviation."""
    return AddNPCLevelDeviation(builder, NPCLevelDeviation)
def AddNPCStarGrade(builder, NPCStarGrade): builder.PrependInt64Slot(5, NPCStarGrade, 0)
def ArenaNPCExcelAddNPCStarGrade(builder, NPCStarGrade):
    """This method is deprecated. Please switch to AddNPCStarGrade."""
    return AddNPCStarGrade(builder, NPCStarGrade)
def AddUseTSS(builder, UseTSS): builder.PrependBoolSlot(6, UseTSS, 0)
def ArenaNPCExcelAddUseTSS(builder, UseTSS):
    """This method is deprecated. Please switch to AddUseTSS."""
    return AddUseTSS(builder, UseTSS)
def AddExceptionCharacterRarities(builder, ExceptionCharacterRarities): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(ExceptionCharacterRarities), 0)
def ArenaNPCExcelAddExceptionCharacterRarities(builder, ExceptionCharacterRarities):
    """This method is deprecated. Please switch to AddExceptionCharacterRarities."""
    return AddExceptionCharacterRarities(builder, ExceptionCharacterRarities)
def StartExceptionCharacterRaritiesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ArenaNPCExcelStartExceptionCharacterRaritiesVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartExceptionCharacterRaritiesVector(builder, numElems)
def AddExceptionMainCharacterIds(builder, ExceptionMainCharacterIds): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(ExceptionMainCharacterIds), 0)
def ArenaNPCExcelAddExceptionMainCharacterIds(builder, ExceptionMainCharacterIds):
    """This method is deprecated. Please switch to AddExceptionMainCharacterIds."""
    return AddExceptionMainCharacterIds(builder, ExceptionMainCharacterIds)
def StartExceptionMainCharacterIdsVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def ArenaNPCExcelStartExceptionMainCharacterIdsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartExceptionMainCharacterIdsVector(builder, numElems)
def AddExceptionSupportCharacterIds(builder, ExceptionSupportCharacterIds): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(ExceptionSupportCharacterIds), 0)
def ArenaNPCExcelAddExceptionSupportCharacterIds(builder, ExceptionSupportCharacterIds):
    """This method is deprecated. Please switch to AddExceptionSupportCharacterIds."""
    return AddExceptionSupportCharacterIds(builder, ExceptionSupportCharacterIds)
def StartExceptionSupportCharacterIdsVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def ArenaNPCExcelStartExceptionSupportCharacterIdsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartExceptionSupportCharacterIdsVector(builder, numElems)
def AddExceptionTSSIds(builder, ExceptionTSSIds): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(ExceptionTSSIds), 0)
def ArenaNPCExcelAddExceptionTSSIds(builder, ExceptionTSSIds):
    """This method is deprecated. Please switch to AddExceptionTSSIds."""
    return AddExceptionTSSIds(builder, ExceptionTSSIds)
def StartExceptionTSSIdsVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def ArenaNPCExcelStartExceptionTSSIdsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartExceptionTSSIdsVector(builder, numElems)
def End(builder): return builder.EndObject()
def ArenaNPCExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)