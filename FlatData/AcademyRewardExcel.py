# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class AcademyRewardExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AcademyRewardExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAcademyRewardExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AcademyRewardExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AcademyRewardExcel
    def Location(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AcademyRewardExcel
    def ScheduleGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AcademyRewardExcel
    def OrderInGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AcademyRewardExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AcademyRewardExcel
    def ProgressTexture(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AcademyRewardExcel
    def LocalizeEtcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # AcademyRewardExcel
    def LocationRank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AcademyRewardExcel
    def FavorExp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AcademyRewardExcel
    def SecretStoneAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AcademyRewardExcel
    def SecretStoneProb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AcademyRewardExcel
    def ExtraFavorExp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AcademyRewardExcel
    def ExtraFavorExpProb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AcademyRewardExcel
    def ExtraRewardParcelType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # AcademyRewardExcel
    def ExtraRewardParcelTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # AcademyRewardExcel
    def ExtraRewardParcelTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AcademyRewardExcel
    def ExtraRewardParcelTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # AcademyRewardExcel
    def ExtraRewardParcelId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # AcademyRewardExcel
    def ExtraRewardParcelIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # AcademyRewardExcel
    def ExtraRewardParcelIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AcademyRewardExcel
    def ExtraRewardParcelIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # AcademyRewardExcel
    def ExtraRewardAmount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # AcademyRewardExcel
    def ExtraRewardAmountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # AcademyRewardExcel
    def ExtraRewardAmountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AcademyRewardExcel
    def ExtraRewardAmountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # AcademyRewardExcel
    def ExtraRewardProb(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # AcademyRewardExcel
    def ExtraRewardProbAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # AcademyRewardExcel
    def ExtraRewardProbLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AcademyRewardExcel
    def ExtraRewardProbIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # AcademyRewardExcel
    def RewardParcelType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # AcademyRewardExcel
    def RewardParcelTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # AcademyRewardExcel
    def RewardParcelTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AcademyRewardExcel
    def RewardParcelTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

    # AcademyRewardExcel
    def RewardParcelId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # AcademyRewardExcel
    def RewardParcelIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # AcademyRewardExcel
    def RewardParcelIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AcademyRewardExcel
    def RewardParcelIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        return o == 0

    # AcademyRewardExcel
    def RewardAmount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # AcademyRewardExcel
    def RewardAmountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # AcademyRewardExcel
    def RewardAmountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AcademyRewardExcel
    def RewardAmountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        return o == 0

def Start(builder): builder.StartObject(19)
def AcademyRewardExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddLocation(builder, Location): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(Location), 0)
def AcademyRewardExcelAddLocation(builder, Location):
    """This method is deprecated. Please switch to AddLocation."""
    return AddLocation(builder, Location)
def AddScheduleGroupId(builder, ScheduleGroupId): builder.PrependInt64Slot(1, ScheduleGroupId, 0)
def AcademyRewardExcelAddScheduleGroupId(builder, ScheduleGroupId):
    """This method is deprecated. Please switch to AddScheduleGroupId."""
    return AddScheduleGroupId(builder, ScheduleGroupId)
def AddOrderInGroup(builder, OrderInGroup): builder.PrependInt64Slot(2, OrderInGroup, 0)
def AcademyRewardExcelAddOrderInGroup(builder, OrderInGroup):
    """This method is deprecated. Please switch to AddOrderInGroup."""
    return AddOrderInGroup(builder, OrderInGroup)
def AddId(builder, Id): builder.PrependInt64Slot(3, Id, 0)
def AcademyRewardExcelAddId(builder, Id):
    """This method is deprecated. Please switch to AddId."""
    return AddId(builder, Id)
def AddProgressTexture(builder, ProgressTexture): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(ProgressTexture), 0)
def AcademyRewardExcelAddProgressTexture(builder, ProgressTexture):
    """This method is deprecated. Please switch to AddProgressTexture."""
    return AddProgressTexture(builder, ProgressTexture)
def AddLocalizeEtcId(builder, LocalizeEtcId): builder.PrependUint32Slot(5, LocalizeEtcId, 0)
def AcademyRewardExcelAddLocalizeEtcId(builder, LocalizeEtcId):
    """This method is deprecated. Please switch to AddLocalizeEtcId."""
    return AddLocalizeEtcId(builder, LocalizeEtcId)
def AddLocationRank(builder, LocationRank): builder.PrependInt64Slot(6, LocationRank, 0)
def AcademyRewardExcelAddLocationRank(builder, LocationRank):
    """This method is deprecated. Please switch to AddLocationRank."""
    return AddLocationRank(builder, LocationRank)
def AddFavorExp(builder, FavorExp): builder.PrependInt64Slot(7, FavorExp, 0)
def AcademyRewardExcelAddFavorExp(builder, FavorExp):
    """This method is deprecated. Please switch to AddFavorExp."""
    return AddFavorExp(builder, FavorExp)
def AddSecretStoneAmount(builder, SecretStoneAmount): builder.PrependInt64Slot(8, SecretStoneAmount, 0)
def AcademyRewardExcelAddSecretStoneAmount(builder, SecretStoneAmount):
    """This method is deprecated. Please switch to AddSecretStoneAmount."""
    return AddSecretStoneAmount(builder, SecretStoneAmount)
def AddSecretStoneProb(builder, SecretStoneProb): builder.PrependInt64Slot(9, SecretStoneProb, 0)
def AcademyRewardExcelAddSecretStoneProb(builder, SecretStoneProb):
    """This method is deprecated. Please switch to AddSecretStoneProb."""
    return AddSecretStoneProb(builder, SecretStoneProb)
def AddExtraFavorExp(builder, ExtraFavorExp): builder.PrependInt64Slot(10, ExtraFavorExp, 0)
def AcademyRewardExcelAddExtraFavorExp(builder, ExtraFavorExp):
    """This method is deprecated. Please switch to AddExtraFavorExp."""
    return AddExtraFavorExp(builder, ExtraFavorExp)
def AddExtraFavorExpProb(builder, ExtraFavorExpProb): builder.PrependInt64Slot(11, ExtraFavorExpProb, 0)
def AcademyRewardExcelAddExtraFavorExpProb(builder, ExtraFavorExpProb):
    """This method is deprecated. Please switch to AddExtraFavorExpProb."""
    return AddExtraFavorExpProb(builder, ExtraFavorExpProb)
def AddExtraRewardParcelType(builder, ExtraRewardParcelType): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(ExtraRewardParcelType), 0)
def AcademyRewardExcelAddExtraRewardParcelType(builder, ExtraRewardParcelType):
    """This method is deprecated. Please switch to AddExtraRewardParcelType."""
    return AddExtraRewardParcelType(builder, ExtraRewardParcelType)
def StartExtraRewardParcelTypeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def AcademyRewardExcelStartExtraRewardParcelTypeVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartExtraRewardParcelTypeVector(builder, numElems)
def AddExtraRewardParcelId(builder, ExtraRewardParcelId): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(ExtraRewardParcelId), 0)
def AcademyRewardExcelAddExtraRewardParcelId(builder, ExtraRewardParcelId):
    """This method is deprecated. Please switch to AddExtraRewardParcelId."""
    return AddExtraRewardParcelId(builder, ExtraRewardParcelId)
def StartExtraRewardParcelIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def AcademyRewardExcelStartExtraRewardParcelIdVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartExtraRewardParcelIdVector(builder, numElems)
def AddExtraRewardAmount(builder, ExtraRewardAmount): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(ExtraRewardAmount), 0)
def AcademyRewardExcelAddExtraRewardAmount(builder, ExtraRewardAmount):
    """This method is deprecated. Please switch to AddExtraRewardAmount."""
    return AddExtraRewardAmount(builder, ExtraRewardAmount)
def StartExtraRewardAmountVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def AcademyRewardExcelStartExtraRewardAmountVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartExtraRewardAmountVector(builder, numElems)
def AddExtraRewardProb(builder, ExtraRewardProb): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(ExtraRewardProb), 0)
def AcademyRewardExcelAddExtraRewardProb(builder, ExtraRewardProb):
    """This method is deprecated. Please switch to AddExtraRewardProb."""
    return AddExtraRewardProb(builder, ExtraRewardProb)
def StartExtraRewardProbVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def AcademyRewardExcelStartExtraRewardProbVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartExtraRewardProbVector(builder, numElems)
def AddRewardParcelType(builder, RewardParcelType): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(RewardParcelType), 0)
def AcademyRewardExcelAddRewardParcelType(builder, RewardParcelType):
    """This method is deprecated. Please switch to AddRewardParcelType."""
    return AddRewardParcelType(builder, RewardParcelType)
def StartRewardParcelTypeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def AcademyRewardExcelStartRewardParcelTypeVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartRewardParcelTypeVector(builder, numElems)
def AddRewardParcelId(builder, RewardParcelId): builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(RewardParcelId), 0)
def AcademyRewardExcelAddRewardParcelId(builder, RewardParcelId):
    """This method is deprecated. Please switch to AddRewardParcelId."""
    return AddRewardParcelId(builder, RewardParcelId)
def StartRewardParcelIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def AcademyRewardExcelStartRewardParcelIdVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartRewardParcelIdVector(builder, numElems)
def AddRewardAmount(builder, RewardAmount): builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(RewardAmount), 0)
def AcademyRewardExcelAddRewardAmount(builder, RewardAmount):
    """This method is deprecated. Please switch to AddRewardAmount."""
    return AddRewardAmount(builder, RewardAmount)
def StartRewardAmountVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def AcademyRewardExcelStartRewardAmountVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartRewardAmountVector(builder, numElems)
def End(builder): return builder.EndObject()
def AcademyRewardExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)