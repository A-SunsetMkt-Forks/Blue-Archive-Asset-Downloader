# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class BossExternalBTExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BossExternalBTExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBossExternalBTExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # BossExternalBTExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BossExternalBTExcel
    def CharacterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # BossExternalBTExcel
    def AIPhase(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # BossExternalBTExcel
    def ExternalBTNodeType_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BossExternalBTExcel
    def ExternalBTTrigger_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BossExternalBTExcel
    def TriggerArgument(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # BossExternalBTExcel
    def BehaviorRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # BossExternalBTExcel
    def ExternalBehavior_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BossExternalBTExcel
    def BehaviorArgument(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Start(builder): builder.StartObject(8)
def BossExternalBTExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddCharacterId(builder, CharacterId): builder.PrependInt64Slot(0, CharacterId, 0)
def BossExternalBTExcelAddCharacterId(builder, CharacterId):
    """This method is deprecated. Please switch to AddCharacterId."""
    return AddCharacterId(builder, CharacterId)
def AddAIPhase(builder, AIPhase): builder.PrependInt64Slot(1, AIPhase, 0)
def BossExternalBTExcelAddAIPhase(builder, AIPhase):
    """This method is deprecated. Please switch to AddAIPhase."""
    return AddAIPhase(builder, AIPhase)
def AddExternalBTNodeType_(builder, ExternalBTNodeType_): builder.PrependInt32Slot(2, ExternalBTNodeType_, 0)
def BossExternalBTExcelAddExternalBTNodeType_(builder, ExternalBTNodeType_):
    """This method is deprecated. Please switch to AddExternalBTNodeType_."""
    return AddExternalBTNodeType_(builder, ExternalBTNodeType_)
def AddExternalBTTrigger_(builder, ExternalBTTrigger_): builder.PrependInt32Slot(3, ExternalBTTrigger_, 0)
def BossExternalBTExcelAddExternalBTTrigger_(builder, ExternalBTTrigger_):
    """This method is deprecated. Please switch to AddExternalBTTrigger_."""
    return AddExternalBTTrigger_(builder, ExternalBTTrigger_)
def AddTriggerArgument(builder, TriggerArgument): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(TriggerArgument), 0)
def BossExternalBTExcelAddTriggerArgument(builder, TriggerArgument):
    """This method is deprecated. Please switch to AddTriggerArgument."""
    return AddTriggerArgument(builder, TriggerArgument)
def AddBehaviorRate(builder, BehaviorRate): builder.PrependInt64Slot(5, BehaviorRate, 0)
def BossExternalBTExcelAddBehaviorRate(builder, BehaviorRate):
    """This method is deprecated. Please switch to AddBehaviorRate."""
    return AddBehaviorRate(builder, BehaviorRate)
def AddExternalBehavior_(builder, ExternalBehavior_): builder.PrependInt32Slot(6, ExternalBehavior_, 0)
def BossExternalBTExcelAddExternalBehavior_(builder, ExternalBehavior_):
    """This method is deprecated. Please switch to AddExternalBehavior_."""
    return AddExternalBehavior_(builder, ExternalBehavior_)
def AddBehaviorArgument(builder, BehaviorArgument): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(BehaviorArgument), 0)
def BossExternalBTExcelAddBehaviorArgument(builder, BehaviorArgument):
    """This method is deprecated. Please switch to AddBehaviorArgument."""
    return AddBehaviorArgument(builder, BehaviorArgument)
def End(builder): return builder.EndObject()
def BossExternalBTExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)