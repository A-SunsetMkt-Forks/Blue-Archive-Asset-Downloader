# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EventContentCharacterBonusExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EventContentCharacterBonusExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEventContentCharacterBonusExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EventContentCharacterBonusExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EventContentCharacterBonusExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentCharacterBonusExcel
    def CharacterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentCharacterBonusExcel
    def EventContentItemType_(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EventContentCharacterBonusExcel
    def EventContentItemType_AsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # EventContentCharacterBonusExcel
    def EventContentItemType_Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentCharacterBonusExcel
    def EventContentItemType_IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # EventContentCharacterBonusExcel
    def BonusPercentage(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EventContentCharacterBonusExcel
    def BonusPercentageAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EventContentCharacterBonusExcel
    def BonusPercentageLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentCharacterBonusExcel
    def BonusPercentageIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def Start(builder): builder.StartObject(4)
def EventContentCharacterBonusExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddEventContentId(builder, EventContentId): builder.PrependInt64Slot(0, EventContentId, 0)
def EventContentCharacterBonusExcelAddEventContentId(builder, EventContentId):
    """This method is deprecated. Please switch to AddEventContentId."""
    return AddEventContentId(builder, EventContentId)
def AddCharacterId(builder, CharacterId): builder.PrependInt64Slot(1, CharacterId, 0)
def EventContentCharacterBonusExcelAddCharacterId(builder, CharacterId):
    """This method is deprecated. Please switch to AddCharacterId."""
    return AddCharacterId(builder, CharacterId)
def AddEventContentItemType_(builder, EventContentItemType_): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(EventContentItemType_), 0)
def EventContentCharacterBonusExcelAddEventContentItemType_(builder, EventContentItemType_):
    """This method is deprecated. Please switch to AddEventContentItemType_."""
    return AddEventContentItemType_(builder, EventContentItemType_)
def StartEventContentItemType_Vector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EventContentCharacterBonusExcelStartEventContentItemType_Vector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartEventContentItemType_Vector(builder, numElems)
def AddBonusPercentage(builder, BonusPercentage): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(BonusPercentage), 0)
def EventContentCharacterBonusExcelAddBonusPercentage(builder, BonusPercentage):
    """This method is deprecated. Please switch to AddBonusPercentage."""
    return AddBonusPercentage(builder, BonusPercentage)
def StartBonusPercentageVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def EventContentCharacterBonusExcelStartBonusPercentageVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartBonusPercentageVector(builder, numElems)
def End(builder): return builder.EndObject()
def EventContentCharacterBonusExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)