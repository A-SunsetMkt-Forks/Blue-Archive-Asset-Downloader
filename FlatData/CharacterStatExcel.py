# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CharacterStatExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CharacterStatExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCharacterStatExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CharacterStatExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CharacterStatExcel
    def CharacterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def StabilityRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def StabilityPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def AttackPower1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def AttackPower100(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def MaxHP1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def MaxHP100(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DefensePower1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DefensePower100(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def HealPower1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def HealPower100(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DodgePoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def AccuracyPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def CriticalPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def CriticalResistPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def CriticalDamageRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def CriticalDamageResistRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def BlockRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def HealEffectivenessRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def OppressionPower(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def OppressionResist(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DefensePenetration1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DefensePenetration100(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def AmmoCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def AmmoCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def IgnoreDelayCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def NormalAttackSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def Range(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def InitialRangeRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def MoveSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def SightPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def ActiveGauge(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def GroggyGauge(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def GroggyTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def StrategyMobility(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def ActionCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def StrategySightRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DamageRatio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DamagedRatio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def StreetBattleAdaptation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def OutdoorBattleAdaptation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def IndoorBattleAdaptation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def RegenCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(43)
def CharacterStatExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddCharacterId(builder, CharacterId): builder.PrependInt64Slot(0, CharacterId, 0)
def CharacterStatExcelAddCharacterId(builder, CharacterId):
    """This method is deprecated. Please switch to AddCharacterId."""
    return AddCharacterId(builder, CharacterId)
def AddStabilityRate(builder, StabilityRate): builder.PrependInt64Slot(1, StabilityRate, 0)
def CharacterStatExcelAddStabilityRate(builder, StabilityRate):
    """This method is deprecated. Please switch to AddStabilityRate."""
    return AddStabilityRate(builder, StabilityRate)
def AddStabilityPoint(builder, StabilityPoint): builder.PrependInt64Slot(2, StabilityPoint, 0)
def CharacterStatExcelAddStabilityPoint(builder, StabilityPoint):
    """This method is deprecated. Please switch to AddStabilityPoint."""
    return AddStabilityPoint(builder, StabilityPoint)
def AddAttackPower1(builder, AttackPower1): builder.PrependInt64Slot(3, AttackPower1, 0)
def CharacterStatExcelAddAttackPower1(builder, AttackPower1):
    """This method is deprecated. Please switch to AddAttackPower1."""
    return AddAttackPower1(builder, AttackPower1)
def AddAttackPower100(builder, AttackPower100): builder.PrependInt64Slot(4, AttackPower100, 0)
def CharacterStatExcelAddAttackPower100(builder, AttackPower100):
    """This method is deprecated. Please switch to AddAttackPower100."""
    return AddAttackPower100(builder, AttackPower100)
def AddMaxHP1(builder, MaxHP1): builder.PrependInt64Slot(5, MaxHP1, 0)
def CharacterStatExcelAddMaxHP1(builder, MaxHP1):
    """This method is deprecated. Please switch to AddMaxHP1."""
    return AddMaxHP1(builder, MaxHP1)
def AddMaxHP100(builder, MaxHP100): builder.PrependInt64Slot(6, MaxHP100, 0)
def CharacterStatExcelAddMaxHP100(builder, MaxHP100):
    """This method is deprecated. Please switch to AddMaxHP100."""
    return AddMaxHP100(builder, MaxHP100)
def AddDefensePower1(builder, DefensePower1): builder.PrependInt64Slot(7, DefensePower1, 0)
def CharacterStatExcelAddDefensePower1(builder, DefensePower1):
    """This method is deprecated. Please switch to AddDefensePower1."""
    return AddDefensePower1(builder, DefensePower1)
def AddDefensePower100(builder, DefensePower100): builder.PrependInt64Slot(8, DefensePower100, 0)
def CharacterStatExcelAddDefensePower100(builder, DefensePower100):
    """This method is deprecated. Please switch to AddDefensePower100."""
    return AddDefensePower100(builder, DefensePower100)
def AddHealPower1(builder, HealPower1): builder.PrependInt64Slot(9, HealPower1, 0)
def CharacterStatExcelAddHealPower1(builder, HealPower1):
    """This method is deprecated. Please switch to AddHealPower1."""
    return AddHealPower1(builder, HealPower1)
def AddHealPower100(builder, HealPower100): builder.PrependInt64Slot(10, HealPower100, 0)
def CharacterStatExcelAddHealPower100(builder, HealPower100):
    """This method is deprecated. Please switch to AddHealPower100."""
    return AddHealPower100(builder, HealPower100)
def AddDodgePoint(builder, DodgePoint): builder.PrependInt64Slot(11, DodgePoint, 0)
def CharacterStatExcelAddDodgePoint(builder, DodgePoint):
    """This method is deprecated. Please switch to AddDodgePoint."""
    return AddDodgePoint(builder, DodgePoint)
def AddAccuracyPoint(builder, AccuracyPoint): builder.PrependInt64Slot(12, AccuracyPoint, 0)
def CharacterStatExcelAddAccuracyPoint(builder, AccuracyPoint):
    """This method is deprecated. Please switch to AddAccuracyPoint."""
    return AddAccuracyPoint(builder, AccuracyPoint)
def AddCriticalPoint(builder, CriticalPoint): builder.PrependInt64Slot(13, CriticalPoint, 0)
def CharacterStatExcelAddCriticalPoint(builder, CriticalPoint):
    """This method is deprecated. Please switch to AddCriticalPoint."""
    return AddCriticalPoint(builder, CriticalPoint)
def AddCriticalResistPoint(builder, CriticalResistPoint): builder.PrependInt64Slot(14, CriticalResistPoint, 0)
def CharacterStatExcelAddCriticalResistPoint(builder, CriticalResistPoint):
    """This method is deprecated. Please switch to AddCriticalResistPoint."""
    return AddCriticalResistPoint(builder, CriticalResistPoint)
def AddCriticalDamageRate(builder, CriticalDamageRate): builder.PrependInt64Slot(15, CriticalDamageRate, 0)
def CharacterStatExcelAddCriticalDamageRate(builder, CriticalDamageRate):
    """This method is deprecated. Please switch to AddCriticalDamageRate."""
    return AddCriticalDamageRate(builder, CriticalDamageRate)
def AddCriticalDamageResistRate(builder, CriticalDamageResistRate): builder.PrependInt64Slot(16, CriticalDamageResistRate, 0)
def CharacterStatExcelAddCriticalDamageResistRate(builder, CriticalDamageResistRate):
    """This method is deprecated. Please switch to AddCriticalDamageResistRate."""
    return AddCriticalDamageResistRate(builder, CriticalDamageResistRate)
def AddBlockRate(builder, BlockRate): builder.PrependInt64Slot(17, BlockRate, 0)
def CharacterStatExcelAddBlockRate(builder, BlockRate):
    """This method is deprecated. Please switch to AddBlockRate."""
    return AddBlockRate(builder, BlockRate)
def AddHealEffectivenessRate(builder, HealEffectivenessRate): builder.PrependInt64Slot(18, HealEffectivenessRate, 0)
def CharacterStatExcelAddHealEffectivenessRate(builder, HealEffectivenessRate):
    """This method is deprecated. Please switch to AddHealEffectivenessRate."""
    return AddHealEffectivenessRate(builder, HealEffectivenessRate)
def AddOppressionPower(builder, OppressionPower): builder.PrependInt64Slot(19, OppressionPower, 0)
def CharacterStatExcelAddOppressionPower(builder, OppressionPower):
    """This method is deprecated. Please switch to AddOppressionPower."""
    return AddOppressionPower(builder, OppressionPower)
def AddOppressionResist(builder, OppressionResist): builder.PrependInt64Slot(20, OppressionResist, 0)
def CharacterStatExcelAddOppressionResist(builder, OppressionResist):
    """This method is deprecated. Please switch to AddOppressionResist."""
    return AddOppressionResist(builder, OppressionResist)
def AddDefensePenetration1(builder, DefensePenetration1): builder.PrependInt64Slot(21, DefensePenetration1, 0)
def CharacterStatExcelAddDefensePenetration1(builder, DefensePenetration1):
    """This method is deprecated. Please switch to AddDefensePenetration1."""
    return AddDefensePenetration1(builder, DefensePenetration1)
def AddDefensePenetration100(builder, DefensePenetration100): builder.PrependInt64Slot(22, DefensePenetration100, 0)
def CharacterStatExcelAddDefensePenetration100(builder, DefensePenetration100):
    """This method is deprecated. Please switch to AddDefensePenetration100."""
    return AddDefensePenetration100(builder, DefensePenetration100)
def AddAmmoCount(builder, AmmoCount): builder.PrependInt64Slot(23, AmmoCount, 0)
def CharacterStatExcelAddAmmoCount(builder, AmmoCount):
    """This method is deprecated. Please switch to AddAmmoCount."""
    return AddAmmoCount(builder, AmmoCount)
def AddAmmoCost(builder, AmmoCost): builder.PrependInt64Slot(24, AmmoCost, 0)
def CharacterStatExcelAddAmmoCost(builder, AmmoCost):
    """This method is deprecated. Please switch to AddAmmoCost."""
    return AddAmmoCost(builder, AmmoCost)
def AddIgnoreDelayCount(builder, IgnoreDelayCount): builder.PrependInt64Slot(25, IgnoreDelayCount, 0)
def CharacterStatExcelAddIgnoreDelayCount(builder, IgnoreDelayCount):
    """This method is deprecated. Please switch to AddIgnoreDelayCount."""
    return AddIgnoreDelayCount(builder, IgnoreDelayCount)
def AddNormalAttackSpeed(builder, NormalAttackSpeed): builder.PrependInt64Slot(26, NormalAttackSpeed, 0)
def CharacterStatExcelAddNormalAttackSpeed(builder, NormalAttackSpeed):
    """This method is deprecated. Please switch to AddNormalAttackSpeed."""
    return AddNormalAttackSpeed(builder, NormalAttackSpeed)
def AddRange(builder, Range): builder.PrependInt64Slot(27, Range, 0)
def CharacterStatExcelAddRange(builder, Range):
    """This method is deprecated. Please switch to AddRange."""
    return AddRange(builder, Range)
def AddInitialRangeRate(builder, InitialRangeRate): builder.PrependInt64Slot(28, InitialRangeRate, 0)
def CharacterStatExcelAddInitialRangeRate(builder, InitialRangeRate):
    """This method is deprecated. Please switch to AddInitialRangeRate."""
    return AddInitialRangeRate(builder, InitialRangeRate)
def AddMoveSpeed(builder, MoveSpeed): builder.PrependInt64Slot(29, MoveSpeed, 0)
def CharacterStatExcelAddMoveSpeed(builder, MoveSpeed):
    """This method is deprecated. Please switch to AddMoveSpeed."""
    return AddMoveSpeed(builder, MoveSpeed)
def AddSightPoint(builder, SightPoint): builder.PrependInt64Slot(30, SightPoint, 0)
def CharacterStatExcelAddSightPoint(builder, SightPoint):
    """This method is deprecated. Please switch to AddSightPoint."""
    return AddSightPoint(builder, SightPoint)
def AddActiveGauge(builder, ActiveGauge): builder.PrependInt64Slot(31, ActiveGauge, 0)
def CharacterStatExcelAddActiveGauge(builder, ActiveGauge):
    """This method is deprecated. Please switch to AddActiveGauge."""
    return AddActiveGauge(builder, ActiveGauge)
def AddGroggyGauge(builder, GroggyGauge): builder.PrependInt32Slot(32, GroggyGauge, 0)
def CharacterStatExcelAddGroggyGauge(builder, GroggyGauge):
    """This method is deprecated. Please switch to AddGroggyGauge."""
    return AddGroggyGauge(builder, GroggyGauge)
def AddGroggyTime(builder, GroggyTime): builder.PrependInt32Slot(33, GroggyTime, 0)
def CharacterStatExcelAddGroggyTime(builder, GroggyTime):
    """This method is deprecated. Please switch to AddGroggyTime."""
    return AddGroggyTime(builder, GroggyTime)
def AddStrategyMobility(builder, StrategyMobility): builder.PrependInt64Slot(34, StrategyMobility, 0)
def CharacterStatExcelAddStrategyMobility(builder, StrategyMobility):
    """This method is deprecated. Please switch to AddStrategyMobility."""
    return AddStrategyMobility(builder, StrategyMobility)
def AddActionCount(builder, ActionCount): builder.PrependInt64Slot(35, ActionCount, 0)
def CharacterStatExcelAddActionCount(builder, ActionCount):
    """This method is deprecated. Please switch to AddActionCount."""
    return AddActionCount(builder, ActionCount)
def AddStrategySightRange(builder, StrategySightRange): builder.PrependInt64Slot(36, StrategySightRange, 0)
def CharacterStatExcelAddStrategySightRange(builder, StrategySightRange):
    """This method is deprecated. Please switch to AddStrategySightRange."""
    return AddStrategySightRange(builder, StrategySightRange)
def AddDamageRatio(builder, DamageRatio): builder.PrependInt64Slot(37, DamageRatio, 0)
def CharacterStatExcelAddDamageRatio(builder, DamageRatio):
    """This method is deprecated. Please switch to AddDamageRatio."""
    return AddDamageRatio(builder, DamageRatio)
def AddDamagedRatio(builder, DamagedRatio): builder.PrependInt64Slot(38, DamagedRatio, 0)
def CharacterStatExcelAddDamagedRatio(builder, DamagedRatio):
    """This method is deprecated. Please switch to AddDamagedRatio."""
    return AddDamagedRatio(builder, DamagedRatio)
def AddStreetBattleAdaptation(builder, StreetBattleAdaptation): builder.PrependInt32Slot(39, StreetBattleAdaptation, 0)
def CharacterStatExcelAddStreetBattleAdaptation(builder, StreetBattleAdaptation):
    """This method is deprecated. Please switch to AddStreetBattleAdaptation."""
    return AddStreetBattleAdaptation(builder, StreetBattleAdaptation)
def AddOutdoorBattleAdaptation(builder, OutdoorBattleAdaptation): builder.PrependInt32Slot(40, OutdoorBattleAdaptation, 0)
def CharacterStatExcelAddOutdoorBattleAdaptation(builder, OutdoorBattleAdaptation):
    """This method is deprecated. Please switch to AddOutdoorBattleAdaptation."""
    return AddOutdoorBattleAdaptation(builder, OutdoorBattleAdaptation)
def AddIndoorBattleAdaptation(builder, IndoorBattleAdaptation): builder.PrependInt32Slot(41, IndoorBattleAdaptation, 0)
def CharacterStatExcelAddIndoorBattleAdaptation(builder, IndoorBattleAdaptation):
    """This method is deprecated. Please switch to AddIndoorBattleAdaptation."""
    return AddIndoorBattleAdaptation(builder, IndoorBattleAdaptation)
def AddRegenCost(builder, RegenCost): builder.PrependInt64Slot(42, RegenCost, 0)
def CharacterStatExcelAddRegenCost(builder, RegenCost):
    """This method is deprecated. Please switch to AddRegenCost."""
    return AddRegenCost(builder, RegenCost)
def End(builder): return builder.EndObject()
def CharacterStatExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)