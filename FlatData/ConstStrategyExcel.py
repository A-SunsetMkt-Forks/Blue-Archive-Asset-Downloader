# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ConstStrategyExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ConstStrategyExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsConstStrategyExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ConstStrategyExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ConstStrategyExcel
    def HexaMapBoundaryOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstStrategyExcel
    def HexaMapStartCameraOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstStrategyExcel
    def CameraZoomMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstStrategyExcel
    def CameraZoomMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstStrategyExcel
    def CameraZoomDefault(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstStrategyExcel
    def HealCostType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstStrategyExcel
    def HealCostAmount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # ConstStrategyExcel
    def HealCostAmountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # ConstStrategyExcel
    def HealCostAmountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ConstStrategyExcel
    def HealCostAmountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # ConstStrategyExcel
    def CanHealHpRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstStrategyExcel
    def PlayTimeLimitInSeconds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstStrategyExcel
    def AdventureEchelonCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstStrategyExcel
    def RaidEchelonCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstStrategyExcel
    def DefaultEchelonCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstStrategyExcel
    def EventContentEchelonCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(13)
def ConstStrategyExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddHexaMapBoundaryOffset(builder, HexaMapBoundaryOffset): builder.PrependFloat32Slot(0, HexaMapBoundaryOffset, 0.0)
def ConstStrategyExcelAddHexaMapBoundaryOffset(builder, HexaMapBoundaryOffset):
    """This method is deprecated. Please switch to AddHexaMapBoundaryOffset."""
    return AddHexaMapBoundaryOffset(builder, HexaMapBoundaryOffset)
def AddHexaMapStartCameraOffset(builder, HexaMapStartCameraOffset): builder.PrependFloat32Slot(1, HexaMapStartCameraOffset, 0.0)
def ConstStrategyExcelAddHexaMapStartCameraOffset(builder, HexaMapStartCameraOffset):
    """This method is deprecated. Please switch to AddHexaMapStartCameraOffset."""
    return AddHexaMapStartCameraOffset(builder, HexaMapStartCameraOffset)
def AddCameraZoomMax(builder, CameraZoomMax): builder.PrependFloat32Slot(2, CameraZoomMax, 0.0)
def ConstStrategyExcelAddCameraZoomMax(builder, CameraZoomMax):
    """This method is deprecated. Please switch to AddCameraZoomMax."""
    return AddCameraZoomMax(builder, CameraZoomMax)
def AddCameraZoomMin(builder, CameraZoomMin): builder.PrependFloat32Slot(3, CameraZoomMin, 0.0)
def ConstStrategyExcelAddCameraZoomMin(builder, CameraZoomMin):
    """This method is deprecated. Please switch to AddCameraZoomMin."""
    return AddCameraZoomMin(builder, CameraZoomMin)
def AddCameraZoomDefault(builder, CameraZoomDefault): builder.PrependFloat32Slot(4, CameraZoomDefault, 0.0)
def ConstStrategyExcelAddCameraZoomDefault(builder, CameraZoomDefault):
    """This method is deprecated. Please switch to AddCameraZoomDefault."""
    return AddCameraZoomDefault(builder, CameraZoomDefault)
def AddHealCostType(builder, HealCostType): builder.PrependInt32Slot(5, HealCostType, 0)
def ConstStrategyExcelAddHealCostType(builder, HealCostType):
    """This method is deprecated. Please switch to AddHealCostType."""
    return AddHealCostType(builder, HealCostType)
def AddHealCostAmount(builder, HealCostAmount): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(HealCostAmount), 0)
def ConstStrategyExcelAddHealCostAmount(builder, HealCostAmount):
    """This method is deprecated. Please switch to AddHealCostAmount."""
    return AddHealCostAmount(builder, HealCostAmount)
def StartHealCostAmountVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def ConstStrategyExcelStartHealCostAmountVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartHealCostAmountVector(builder, numElems)
def AddCanHealHpRate(builder, CanHealHpRate): builder.PrependInt32Slot(7, CanHealHpRate, 0)
def ConstStrategyExcelAddCanHealHpRate(builder, CanHealHpRate):
    """This method is deprecated. Please switch to AddCanHealHpRate."""
    return AddCanHealHpRate(builder, CanHealHpRate)
def AddPlayTimeLimitInSeconds(builder, PlayTimeLimitInSeconds): builder.PrependInt64Slot(8, PlayTimeLimitInSeconds, 0)
def ConstStrategyExcelAddPlayTimeLimitInSeconds(builder, PlayTimeLimitInSeconds):
    """This method is deprecated. Please switch to AddPlayTimeLimitInSeconds."""
    return AddPlayTimeLimitInSeconds(builder, PlayTimeLimitInSeconds)
def AddAdventureEchelonCount(builder, AdventureEchelonCount): builder.PrependInt32Slot(9, AdventureEchelonCount, 0)
def ConstStrategyExcelAddAdventureEchelonCount(builder, AdventureEchelonCount):
    """This method is deprecated. Please switch to AddAdventureEchelonCount."""
    return AddAdventureEchelonCount(builder, AdventureEchelonCount)
def AddRaidEchelonCount(builder, RaidEchelonCount): builder.PrependInt32Slot(10, RaidEchelonCount, 0)
def ConstStrategyExcelAddRaidEchelonCount(builder, RaidEchelonCount):
    """This method is deprecated. Please switch to AddRaidEchelonCount."""
    return AddRaidEchelonCount(builder, RaidEchelonCount)
def AddDefaultEchelonCount(builder, DefaultEchelonCount): builder.PrependInt32Slot(11, DefaultEchelonCount, 0)
def ConstStrategyExcelAddDefaultEchelonCount(builder, DefaultEchelonCount):
    """This method is deprecated. Please switch to AddDefaultEchelonCount."""
    return AddDefaultEchelonCount(builder, DefaultEchelonCount)
def AddEventContentEchelonCount(builder, EventContentEchelonCount): builder.PrependInt32Slot(12, EventContentEchelonCount, 0)
def ConstStrategyExcelAddEventContentEchelonCount(builder, EventContentEchelonCount):
    """This method is deprecated. Please switch to AddEventContentEchelonCount."""
    return AddEventContentEchelonCount(builder, EventContentEchelonCount)
def End(builder): return builder.EndObject()
def ConstStrategyExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)