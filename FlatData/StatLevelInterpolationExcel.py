# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StatLevelInterpolationExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StatLevelInterpolationExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStatLevelInterpolationExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # StatLevelInterpolationExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StatLevelInterpolationExcel
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # StatLevelInterpolationExcel
    def Standard(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # StatLevelInterpolationExcel
    def Premature(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # StatLevelInterpolationExcel
    def LateBloom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # StatLevelInterpolationExcel
    def Obstacle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(5)
def StatLevelInterpolationExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddLevel(builder, Level): builder.PrependInt64Slot(0, Level, 0)
def StatLevelInterpolationExcelAddLevel(builder, Level):
    """This method is deprecated. Please switch to AddLevel."""
    return AddLevel(builder, Level)
def AddStandard(builder, Standard): builder.PrependInt64Slot(1, Standard, 0)
def StatLevelInterpolationExcelAddStandard(builder, Standard):
    """This method is deprecated. Please switch to AddStandard."""
    return AddStandard(builder, Standard)
def AddPremature(builder, Premature): builder.PrependInt64Slot(2, Premature, 0)
def StatLevelInterpolationExcelAddPremature(builder, Premature):
    """This method is deprecated. Please switch to AddPremature."""
    return AddPremature(builder, Premature)
def AddLateBloom(builder, LateBloom): builder.PrependInt64Slot(3, LateBloom, 0)
def StatLevelInterpolationExcelAddLateBloom(builder, LateBloom):
    """This method is deprecated. Please switch to AddLateBloom."""
    return AddLateBloom(builder, LateBloom)
def AddObstacle(builder, Obstacle): builder.PrependInt64Slot(4, Obstacle, 0)
def StatLevelInterpolationExcelAddObstacle(builder, Obstacle):
    """This method is deprecated. Please switch to AddObstacle."""
    return AddObstacle(builder, Obstacle)
def End(builder): return builder.EndObject()
def StatLevelInterpolationExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)