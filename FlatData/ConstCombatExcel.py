# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ConstCombatExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ConstCombatExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsConstCombatExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ConstCombatExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ConstCombatExcel
    def SkillHandCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def DyingTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def BuffIconBlinkTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def ShowBufficonEXSkill(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ConstCombatExcel
    def ShowBufficonPassiveSkill(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ConstCombatExcel
    def ShowBufficonExtraPassiveSkill(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ConstCombatExcel
    def ShowBufficonLeaderSkill(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ConstCombatExcel
    def SuppliesConditionStringId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ConstCombatExcel
    def PublicSpeechBubbleOffsetX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstCombatExcel
    def PublicSpeechBubbleOffsetY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstCombatExcel
    def PublicSpeechBubbleOffsetZ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstCombatExcel
    def PublicSpeechDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstCombatExcel
    def ShowRaidListCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def MaxFinalDamage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def MaxFinalHeal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def MaxRaidTicketCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def EngageTimelinePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ConstCombatExcel
    def EngageWithSupporterTimelinePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ConstCombatExcel
    def VictoryTimelinePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ConstCombatExcel
    def TimeLimitAlarm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def EchelonMaxCommonCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def EchelonInitCommonCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def SkillSlotCoolTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def EnemyRegenCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def ChampionRegenCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def PlayerRegenCostDelay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def CrowdControlFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def RaidOpenScenarioId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ConstCombatExcel
    def DefenceConstA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def DefenceConstB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def DefenceConstC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def DefenceConstD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def AccuracyConstA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def AccuracyConstB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def AccuracyConstC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def AccuracyConstD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def CriticalConstA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def CriticalConstB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def CriticalConstC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def CriticalConstD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def MaxGroupBuffLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def EmojiDefaultTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def TimeLineActionRotateSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def BodyRotateSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def NormalTimeScale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def FastTimeScale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def BulletTimeScale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def UIDisplayDelayAfterSkillCutIn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def UseInitialRangeForCoverMove(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ConstCombatExcel
    def SlowTimeScale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def AimIKMinDegree(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstCombatExcel
    def AimIKMaxDegree(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstCombatExcel
    def MinimumClearTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def MinimumClearLevelGap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def CheckCheaterMaxUseCostNonArena(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def CheckCheaterMaxUseCostArena(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def AllowedMaxTimeScale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def RandomAnimationOutput(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def SummonedTeleportDistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstCombatExcel
    def ArenaMinimumClearTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(60)
def ConstCombatExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddSkillHandCount(builder, SkillHandCount): builder.PrependInt32Slot(0, SkillHandCount, 0)
def ConstCombatExcelAddSkillHandCount(builder, SkillHandCount):
    """This method is deprecated. Please switch to AddSkillHandCount."""
    return AddSkillHandCount(builder, SkillHandCount)
def AddDyingTime(builder, DyingTime): builder.PrependInt32Slot(1, DyingTime, 0)
def ConstCombatExcelAddDyingTime(builder, DyingTime):
    """This method is deprecated. Please switch to AddDyingTime."""
    return AddDyingTime(builder, DyingTime)
def AddBuffIconBlinkTime(builder, BuffIconBlinkTime): builder.PrependInt32Slot(2, BuffIconBlinkTime, 0)
def ConstCombatExcelAddBuffIconBlinkTime(builder, BuffIconBlinkTime):
    """This method is deprecated. Please switch to AddBuffIconBlinkTime."""
    return AddBuffIconBlinkTime(builder, BuffIconBlinkTime)
def AddShowBufficonEXSkill(builder, ShowBufficonEXSkill): builder.PrependBoolSlot(3, ShowBufficonEXSkill, 0)
def ConstCombatExcelAddShowBufficonEXSkill(builder, ShowBufficonEXSkill):
    """This method is deprecated. Please switch to AddShowBufficonEXSkill."""
    return AddShowBufficonEXSkill(builder, ShowBufficonEXSkill)
def AddShowBufficonPassiveSkill(builder, ShowBufficonPassiveSkill): builder.PrependBoolSlot(4, ShowBufficonPassiveSkill, 0)
def ConstCombatExcelAddShowBufficonPassiveSkill(builder, ShowBufficonPassiveSkill):
    """This method is deprecated. Please switch to AddShowBufficonPassiveSkill."""
    return AddShowBufficonPassiveSkill(builder, ShowBufficonPassiveSkill)
def AddShowBufficonExtraPassiveSkill(builder, ShowBufficonExtraPassiveSkill): builder.PrependBoolSlot(5, ShowBufficonExtraPassiveSkill, 0)
def ConstCombatExcelAddShowBufficonExtraPassiveSkill(builder, ShowBufficonExtraPassiveSkill):
    """This method is deprecated. Please switch to AddShowBufficonExtraPassiveSkill."""
    return AddShowBufficonExtraPassiveSkill(builder, ShowBufficonExtraPassiveSkill)
def AddShowBufficonLeaderSkill(builder, ShowBufficonLeaderSkill): builder.PrependBoolSlot(6, ShowBufficonLeaderSkill, 0)
def ConstCombatExcelAddShowBufficonLeaderSkill(builder, ShowBufficonLeaderSkill):
    """This method is deprecated. Please switch to AddShowBufficonLeaderSkill."""
    return AddShowBufficonLeaderSkill(builder, ShowBufficonLeaderSkill)
def AddSuppliesConditionStringId(builder, SuppliesConditionStringId): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(SuppliesConditionStringId), 0)
def ConstCombatExcelAddSuppliesConditionStringId(builder, SuppliesConditionStringId):
    """This method is deprecated. Please switch to AddSuppliesConditionStringId."""
    return AddSuppliesConditionStringId(builder, SuppliesConditionStringId)
def AddPublicSpeechBubbleOffsetX(builder, PublicSpeechBubbleOffsetX): builder.PrependFloat32Slot(8, PublicSpeechBubbleOffsetX, 0.0)
def ConstCombatExcelAddPublicSpeechBubbleOffsetX(builder, PublicSpeechBubbleOffsetX):
    """This method is deprecated. Please switch to AddPublicSpeechBubbleOffsetX."""
    return AddPublicSpeechBubbleOffsetX(builder, PublicSpeechBubbleOffsetX)
def AddPublicSpeechBubbleOffsetY(builder, PublicSpeechBubbleOffsetY): builder.PrependFloat32Slot(9, PublicSpeechBubbleOffsetY, 0.0)
def ConstCombatExcelAddPublicSpeechBubbleOffsetY(builder, PublicSpeechBubbleOffsetY):
    """This method is deprecated. Please switch to AddPublicSpeechBubbleOffsetY."""
    return AddPublicSpeechBubbleOffsetY(builder, PublicSpeechBubbleOffsetY)
def AddPublicSpeechBubbleOffsetZ(builder, PublicSpeechBubbleOffsetZ): builder.PrependFloat32Slot(10, PublicSpeechBubbleOffsetZ, 0.0)
def ConstCombatExcelAddPublicSpeechBubbleOffsetZ(builder, PublicSpeechBubbleOffsetZ):
    """This method is deprecated. Please switch to AddPublicSpeechBubbleOffsetZ."""
    return AddPublicSpeechBubbleOffsetZ(builder, PublicSpeechBubbleOffsetZ)
def AddPublicSpeechDuration(builder, PublicSpeechDuration): builder.PrependFloat32Slot(11, PublicSpeechDuration, 0.0)
def ConstCombatExcelAddPublicSpeechDuration(builder, PublicSpeechDuration):
    """This method is deprecated. Please switch to AddPublicSpeechDuration."""
    return AddPublicSpeechDuration(builder, PublicSpeechDuration)
def AddShowRaidListCount(builder, ShowRaidListCount): builder.PrependInt32Slot(12, ShowRaidListCount, 0)
def ConstCombatExcelAddShowRaidListCount(builder, ShowRaidListCount):
    """This method is deprecated. Please switch to AddShowRaidListCount."""
    return AddShowRaidListCount(builder, ShowRaidListCount)
def AddMaxFinalDamage(builder, MaxFinalDamage): builder.PrependInt64Slot(13, MaxFinalDamage, 0)
def ConstCombatExcelAddMaxFinalDamage(builder, MaxFinalDamage):
    """This method is deprecated. Please switch to AddMaxFinalDamage."""
    return AddMaxFinalDamage(builder, MaxFinalDamage)
def AddMaxFinalHeal(builder, MaxFinalHeal): builder.PrependInt64Slot(14, MaxFinalHeal, 0)
def ConstCombatExcelAddMaxFinalHeal(builder, MaxFinalHeal):
    """This method is deprecated. Please switch to AddMaxFinalHeal."""
    return AddMaxFinalHeal(builder, MaxFinalHeal)
def AddMaxRaidTicketCount(builder, MaxRaidTicketCount): builder.PrependInt64Slot(15, MaxRaidTicketCount, 0)
def ConstCombatExcelAddMaxRaidTicketCount(builder, MaxRaidTicketCount):
    """This method is deprecated. Please switch to AddMaxRaidTicketCount."""
    return AddMaxRaidTicketCount(builder, MaxRaidTicketCount)
def AddEngageTimelinePath(builder, EngageTimelinePath): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(EngageTimelinePath), 0)
def ConstCombatExcelAddEngageTimelinePath(builder, EngageTimelinePath):
    """This method is deprecated. Please switch to AddEngageTimelinePath."""
    return AddEngageTimelinePath(builder, EngageTimelinePath)
def AddEngageWithSupporterTimelinePath(builder, EngageWithSupporterTimelinePath): builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(EngageWithSupporterTimelinePath), 0)
def ConstCombatExcelAddEngageWithSupporterTimelinePath(builder, EngageWithSupporterTimelinePath):
    """This method is deprecated. Please switch to AddEngageWithSupporterTimelinePath."""
    return AddEngageWithSupporterTimelinePath(builder, EngageWithSupporterTimelinePath)
def AddVictoryTimelinePath(builder, VictoryTimelinePath): builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(VictoryTimelinePath), 0)
def ConstCombatExcelAddVictoryTimelinePath(builder, VictoryTimelinePath):
    """This method is deprecated. Please switch to AddVictoryTimelinePath."""
    return AddVictoryTimelinePath(builder, VictoryTimelinePath)
def AddTimeLimitAlarm(builder, TimeLimitAlarm): builder.PrependInt64Slot(19, TimeLimitAlarm, 0)
def ConstCombatExcelAddTimeLimitAlarm(builder, TimeLimitAlarm):
    """This method is deprecated. Please switch to AddTimeLimitAlarm."""
    return AddTimeLimitAlarm(builder, TimeLimitAlarm)
def AddEchelonMaxCommonCost(builder, EchelonMaxCommonCost): builder.PrependInt32Slot(20, EchelonMaxCommonCost, 0)
def ConstCombatExcelAddEchelonMaxCommonCost(builder, EchelonMaxCommonCost):
    """This method is deprecated. Please switch to AddEchelonMaxCommonCost."""
    return AddEchelonMaxCommonCost(builder, EchelonMaxCommonCost)
def AddEchelonInitCommonCost(builder, EchelonInitCommonCost): builder.PrependInt32Slot(21, EchelonInitCommonCost, 0)
def ConstCombatExcelAddEchelonInitCommonCost(builder, EchelonInitCommonCost):
    """This method is deprecated. Please switch to AddEchelonInitCommonCost."""
    return AddEchelonInitCommonCost(builder, EchelonInitCommonCost)
def AddSkillSlotCoolTime(builder, SkillSlotCoolTime): builder.PrependInt64Slot(22, SkillSlotCoolTime, 0)
def ConstCombatExcelAddSkillSlotCoolTime(builder, SkillSlotCoolTime):
    """This method is deprecated. Please switch to AddSkillSlotCoolTime."""
    return AddSkillSlotCoolTime(builder, SkillSlotCoolTime)
def AddEnemyRegenCost(builder, EnemyRegenCost): builder.PrependInt64Slot(23, EnemyRegenCost, 0)
def ConstCombatExcelAddEnemyRegenCost(builder, EnemyRegenCost):
    """This method is deprecated. Please switch to AddEnemyRegenCost."""
    return AddEnemyRegenCost(builder, EnemyRegenCost)
def AddChampionRegenCost(builder, ChampionRegenCost): builder.PrependInt64Slot(24, ChampionRegenCost, 0)
def ConstCombatExcelAddChampionRegenCost(builder, ChampionRegenCost):
    """This method is deprecated. Please switch to AddChampionRegenCost."""
    return AddChampionRegenCost(builder, ChampionRegenCost)
def AddPlayerRegenCostDelay(builder, PlayerRegenCostDelay): builder.PrependInt64Slot(25, PlayerRegenCostDelay, 0)
def ConstCombatExcelAddPlayerRegenCostDelay(builder, PlayerRegenCostDelay):
    """This method is deprecated. Please switch to AddPlayerRegenCostDelay."""
    return AddPlayerRegenCostDelay(builder, PlayerRegenCostDelay)
def AddCrowdControlFactor(builder, CrowdControlFactor): builder.PrependInt64Slot(26, CrowdControlFactor, 0)
def ConstCombatExcelAddCrowdControlFactor(builder, CrowdControlFactor):
    """This method is deprecated. Please switch to AddCrowdControlFactor."""
    return AddCrowdControlFactor(builder, CrowdControlFactor)
def AddRaidOpenScenarioId(builder, RaidOpenScenarioId): builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(RaidOpenScenarioId), 0)
def ConstCombatExcelAddRaidOpenScenarioId(builder, RaidOpenScenarioId):
    """This method is deprecated. Please switch to AddRaidOpenScenarioId."""
    return AddRaidOpenScenarioId(builder, RaidOpenScenarioId)
def AddDefenceConstA(builder, DefenceConstA): builder.PrependInt64Slot(28, DefenceConstA, 0)
def ConstCombatExcelAddDefenceConstA(builder, DefenceConstA):
    """This method is deprecated. Please switch to AddDefenceConstA."""
    return AddDefenceConstA(builder, DefenceConstA)
def AddDefenceConstB(builder, DefenceConstB): builder.PrependInt64Slot(29, DefenceConstB, 0)
def ConstCombatExcelAddDefenceConstB(builder, DefenceConstB):
    """This method is deprecated. Please switch to AddDefenceConstB."""
    return AddDefenceConstB(builder, DefenceConstB)
def AddDefenceConstC(builder, DefenceConstC): builder.PrependInt64Slot(30, DefenceConstC, 0)
def ConstCombatExcelAddDefenceConstC(builder, DefenceConstC):
    """This method is deprecated. Please switch to AddDefenceConstC."""
    return AddDefenceConstC(builder, DefenceConstC)
def AddDefenceConstD(builder, DefenceConstD): builder.PrependInt64Slot(31, DefenceConstD, 0)
def ConstCombatExcelAddDefenceConstD(builder, DefenceConstD):
    """This method is deprecated. Please switch to AddDefenceConstD."""
    return AddDefenceConstD(builder, DefenceConstD)
def AddAccuracyConstA(builder, AccuracyConstA): builder.PrependInt64Slot(32, AccuracyConstA, 0)
def ConstCombatExcelAddAccuracyConstA(builder, AccuracyConstA):
    """This method is deprecated. Please switch to AddAccuracyConstA."""
    return AddAccuracyConstA(builder, AccuracyConstA)
def AddAccuracyConstB(builder, AccuracyConstB): builder.PrependInt64Slot(33, AccuracyConstB, 0)
def ConstCombatExcelAddAccuracyConstB(builder, AccuracyConstB):
    """This method is deprecated. Please switch to AddAccuracyConstB."""
    return AddAccuracyConstB(builder, AccuracyConstB)
def AddAccuracyConstC(builder, AccuracyConstC): builder.PrependInt64Slot(34, AccuracyConstC, 0)
def ConstCombatExcelAddAccuracyConstC(builder, AccuracyConstC):
    """This method is deprecated. Please switch to AddAccuracyConstC."""
    return AddAccuracyConstC(builder, AccuracyConstC)
def AddAccuracyConstD(builder, AccuracyConstD): builder.PrependInt64Slot(35, AccuracyConstD, 0)
def ConstCombatExcelAddAccuracyConstD(builder, AccuracyConstD):
    """This method is deprecated. Please switch to AddAccuracyConstD."""
    return AddAccuracyConstD(builder, AccuracyConstD)
def AddCriticalConstA(builder, CriticalConstA): builder.PrependInt64Slot(36, CriticalConstA, 0)
def ConstCombatExcelAddCriticalConstA(builder, CriticalConstA):
    """This method is deprecated. Please switch to AddCriticalConstA."""
    return AddCriticalConstA(builder, CriticalConstA)
def AddCriticalConstB(builder, CriticalConstB): builder.PrependInt64Slot(37, CriticalConstB, 0)
def ConstCombatExcelAddCriticalConstB(builder, CriticalConstB):
    """This method is deprecated. Please switch to AddCriticalConstB."""
    return AddCriticalConstB(builder, CriticalConstB)
def AddCriticalConstC(builder, CriticalConstC): builder.PrependInt64Slot(38, CriticalConstC, 0)
def ConstCombatExcelAddCriticalConstC(builder, CriticalConstC):
    """This method is deprecated. Please switch to AddCriticalConstC."""
    return AddCriticalConstC(builder, CriticalConstC)
def AddCriticalConstD(builder, CriticalConstD): builder.PrependInt64Slot(39, CriticalConstD, 0)
def ConstCombatExcelAddCriticalConstD(builder, CriticalConstD):
    """This method is deprecated. Please switch to AddCriticalConstD."""
    return AddCriticalConstD(builder, CriticalConstD)
def AddMaxGroupBuffLevel(builder, MaxGroupBuffLevel): builder.PrependInt32Slot(40, MaxGroupBuffLevel, 0)
def ConstCombatExcelAddMaxGroupBuffLevel(builder, MaxGroupBuffLevel):
    """This method is deprecated. Please switch to AddMaxGroupBuffLevel."""
    return AddMaxGroupBuffLevel(builder, MaxGroupBuffLevel)
def AddEmojiDefaultTime(builder, EmojiDefaultTime): builder.PrependInt32Slot(41, EmojiDefaultTime, 0)
def ConstCombatExcelAddEmojiDefaultTime(builder, EmojiDefaultTime):
    """This method is deprecated. Please switch to AddEmojiDefaultTime."""
    return AddEmojiDefaultTime(builder, EmojiDefaultTime)
def AddTimeLineActionRotateSpeed(builder, TimeLineActionRotateSpeed): builder.PrependInt64Slot(42, TimeLineActionRotateSpeed, 0)
def ConstCombatExcelAddTimeLineActionRotateSpeed(builder, TimeLineActionRotateSpeed):
    """This method is deprecated. Please switch to AddTimeLineActionRotateSpeed."""
    return AddTimeLineActionRotateSpeed(builder, TimeLineActionRotateSpeed)
def AddBodyRotateSpeed(builder, BodyRotateSpeed): builder.PrependInt64Slot(43, BodyRotateSpeed, 0)
def ConstCombatExcelAddBodyRotateSpeed(builder, BodyRotateSpeed):
    """This method is deprecated. Please switch to AddBodyRotateSpeed."""
    return AddBodyRotateSpeed(builder, BodyRotateSpeed)
def AddNormalTimeScale(builder, NormalTimeScale): builder.PrependInt64Slot(44, NormalTimeScale, 0)
def ConstCombatExcelAddNormalTimeScale(builder, NormalTimeScale):
    """This method is deprecated. Please switch to AddNormalTimeScale."""
    return AddNormalTimeScale(builder, NormalTimeScale)
def AddFastTimeScale(builder, FastTimeScale): builder.PrependInt64Slot(45, FastTimeScale, 0)
def ConstCombatExcelAddFastTimeScale(builder, FastTimeScale):
    """This method is deprecated. Please switch to AddFastTimeScale."""
    return AddFastTimeScale(builder, FastTimeScale)
def AddBulletTimeScale(builder, BulletTimeScale): builder.PrependInt64Slot(46, BulletTimeScale, 0)
def ConstCombatExcelAddBulletTimeScale(builder, BulletTimeScale):
    """This method is deprecated. Please switch to AddBulletTimeScale."""
    return AddBulletTimeScale(builder, BulletTimeScale)
def AddUIDisplayDelayAfterSkillCutIn(builder, UIDisplayDelayAfterSkillCutIn): builder.PrependInt64Slot(47, UIDisplayDelayAfterSkillCutIn, 0)
def ConstCombatExcelAddUIDisplayDelayAfterSkillCutIn(builder, UIDisplayDelayAfterSkillCutIn):
    """This method is deprecated. Please switch to AddUIDisplayDelayAfterSkillCutIn."""
    return AddUIDisplayDelayAfterSkillCutIn(builder, UIDisplayDelayAfterSkillCutIn)
def AddUseInitialRangeForCoverMove(builder, UseInitialRangeForCoverMove): builder.PrependBoolSlot(48, UseInitialRangeForCoverMove, 0)
def ConstCombatExcelAddUseInitialRangeForCoverMove(builder, UseInitialRangeForCoverMove):
    """This method is deprecated. Please switch to AddUseInitialRangeForCoverMove."""
    return AddUseInitialRangeForCoverMove(builder, UseInitialRangeForCoverMove)
def AddSlowTimeScale(builder, SlowTimeScale): builder.PrependInt64Slot(49, SlowTimeScale, 0)
def ConstCombatExcelAddSlowTimeScale(builder, SlowTimeScale):
    """This method is deprecated. Please switch to AddSlowTimeScale."""
    return AddSlowTimeScale(builder, SlowTimeScale)
def AddAimIKMinDegree(builder, AimIKMinDegree): builder.PrependFloat32Slot(50, AimIKMinDegree, 0.0)
def ConstCombatExcelAddAimIKMinDegree(builder, AimIKMinDegree):
    """This method is deprecated. Please switch to AddAimIKMinDegree."""
    return AddAimIKMinDegree(builder, AimIKMinDegree)
def AddAimIKMaxDegree(builder, AimIKMaxDegree): builder.PrependFloat32Slot(51, AimIKMaxDegree, 0.0)
def ConstCombatExcelAddAimIKMaxDegree(builder, AimIKMaxDegree):
    """This method is deprecated. Please switch to AddAimIKMaxDegree."""
    return AddAimIKMaxDegree(builder, AimIKMaxDegree)
def AddMinimumClearTime(builder, MinimumClearTime): builder.PrependInt32Slot(52, MinimumClearTime, 0)
def ConstCombatExcelAddMinimumClearTime(builder, MinimumClearTime):
    """This method is deprecated. Please switch to AddMinimumClearTime."""
    return AddMinimumClearTime(builder, MinimumClearTime)
def AddMinimumClearLevelGap(builder, MinimumClearLevelGap): builder.PrependInt32Slot(53, MinimumClearLevelGap, 0)
def ConstCombatExcelAddMinimumClearLevelGap(builder, MinimumClearLevelGap):
    """This method is deprecated. Please switch to AddMinimumClearLevelGap."""
    return AddMinimumClearLevelGap(builder, MinimumClearLevelGap)
def AddCheckCheaterMaxUseCostNonArena(builder, CheckCheaterMaxUseCostNonArena): builder.PrependInt32Slot(54, CheckCheaterMaxUseCostNonArena, 0)
def ConstCombatExcelAddCheckCheaterMaxUseCostNonArena(builder, CheckCheaterMaxUseCostNonArena):
    """This method is deprecated. Please switch to AddCheckCheaterMaxUseCostNonArena."""
    return AddCheckCheaterMaxUseCostNonArena(builder, CheckCheaterMaxUseCostNonArena)
def AddCheckCheaterMaxUseCostArena(builder, CheckCheaterMaxUseCostArena): builder.PrependInt32Slot(55, CheckCheaterMaxUseCostArena, 0)
def ConstCombatExcelAddCheckCheaterMaxUseCostArena(builder, CheckCheaterMaxUseCostArena):
    """This method is deprecated. Please switch to AddCheckCheaterMaxUseCostArena."""
    return AddCheckCheaterMaxUseCostArena(builder, CheckCheaterMaxUseCostArena)
def AddAllowedMaxTimeScale(builder, AllowedMaxTimeScale): builder.PrependInt64Slot(56, AllowedMaxTimeScale, 0)
def ConstCombatExcelAddAllowedMaxTimeScale(builder, AllowedMaxTimeScale):
    """This method is deprecated. Please switch to AddAllowedMaxTimeScale."""
    return AddAllowedMaxTimeScale(builder, AllowedMaxTimeScale)
def AddRandomAnimationOutput(builder, RandomAnimationOutput): builder.PrependInt64Slot(57, RandomAnimationOutput, 0)
def ConstCombatExcelAddRandomAnimationOutput(builder, RandomAnimationOutput):
    """This method is deprecated. Please switch to AddRandomAnimationOutput."""
    return AddRandomAnimationOutput(builder, RandomAnimationOutput)
def AddSummonedTeleportDistance(builder, SummonedTeleportDistance): builder.PrependInt64Slot(58, SummonedTeleportDistance, 0)
def ConstCombatExcelAddSummonedTeleportDistance(builder, SummonedTeleportDistance):
    """This method is deprecated. Please switch to AddSummonedTeleportDistance."""
    return AddSummonedTeleportDistance(builder, SummonedTeleportDistance)
def AddArenaMinimumClearTime(builder, ArenaMinimumClearTime): builder.PrependInt32Slot(59, ArenaMinimumClearTime, 0)
def ConstCombatExcelAddArenaMinimumClearTime(builder, ArenaMinimumClearTime):
    """This method is deprecated. Please switch to AddArenaMinimumClearTime."""
    return AddArenaMinimumClearTime(builder, ArenaMinimumClearTime)
def End(builder): return builder.EndObject()
def ConstCombatExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)