# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RecipeCraftExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RecipeCraftExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRecipeCraftExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RecipeCraftExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RecipeCraftExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # RecipeCraftExcel
    def DevName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # RecipeCraftExcel
    def RecipeType_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # RecipeCraftExcel
    def RecipeIngredientId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # RecipeCraftExcel
    def RecipeIngredientDevName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # RecipeCraftExcel
    def ParcelType_(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # RecipeCraftExcel
    def ParcelType_AsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # RecipeCraftExcel
    def ParcelType_Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RecipeCraftExcel
    def ParcelType_IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # RecipeCraftExcel
    def ParcelId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # RecipeCraftExcel
    def ParcelIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # RecipeCraftExcel
    def ParcelIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RecipeCraftExcel
    def ParcelIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # RecipeCraftExcel
    def ParcelDevName(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RecipeCraftExcel
    def ParcelDevNameLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RecipeCraftExcel
    def ParcelDevNameIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # RecipeCraftExcel
    def ResultAmountMin(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # RecipeCraftExcel
    def ResultAmountMinAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # RecipeCraftExcel
    def ResultAmountMinLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RecipeCraftExcel
    def ResultAmountMinIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # RecipeCraftExcel
    def ResultAmountMax(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # RecipeCraftExcel
    def ResultAmountMaxAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # RecipeCraftExcel
    def ResultAmountMaxLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RecipeCraftExcel
    def ResultAmountMaxIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

def Start(builder): builder.StartObject(10)
def RecipeCraftExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddId(builder, Id): builder.PrependInt64Slot(0, Id, 0)
def RecipeCraftExcelAddId(builder, Id):
    """This method is deprecated. Please switch to AddId."""
    return AddId(builder, Id)
def AddDevName(builder, DevName): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(DevName), 0)
def RecipeCraftExcelAddDevName(builder, DevName):
    """This method is deprecated. Please switch to AddDevName."""
    return AddDevName(builder, DevName)
def AddRecipeType_(builder, RecipeType_): builder.PrependInt32Slot(2, RecipeType_, 0)
def RecipeCraftExcelAddRecipeType_(builder, RecipeType_):
    """This method is deprecated. Please switch to AddRecipeType_."""
    return AddRecipeType_(builder, RecipeType_)
def AddRecipeIngredientId(builder, RecipeIngredientId): builder.PrependInt64Slot(3, RecipeIngredientId, 0)
def RecipeCraftExcelAddRecipeIngredientId(builder, RecipeIngredientId):
    """This method is deprecated. Please switch to AddRecipeIngredientId."""
    return AddRecipeIngredientId(builder, RecipeIngredientId)
def AddRecipeIngredientDevName(builder, RecipeIngredientDevName): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(RecipeIngredientDevName), 0)
def RecipeCraftExcelAddRecipeIngredientDevName(builder, RecipeIngredientDevName):
    """This method is deprecated. Please switch to AddRecipeIngredientDevName."""
    return AddRecipeIngredientDevName(builder, RecipeIngredientDevName)
def AddParcelType_(builder, ParcelType_): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(ParcelType_), 0)
def RecipeCraftExcelAddParcelType_(builder, ParcelType_):
    """This method is deprecated. Please switch to AddParcelType_."""
    return AddParcelType_(builder, ParcelType_)
def StartParcelType_Vector(builder, numElems): return builder.StartVector(4, numElems, 4)
def RecipeCraftExcelStartParcelType_Vector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartParcelType_Vector(builder, numElems)
def AddParcelId(builder, ParcelId): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(ParcelId), 0)
def RecipeCraftExcelAddParcelId(builder, ParcelId):
    """This method is deprecated. Please switch to AddParcelId."""
    return AddParcelId(builder, ParcelId)
def StartParcelIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def RecipeCraftExcelStartParcelIdVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartParcelIdVector(builder, numElems)
def AddParcelDevName(builder, ParcelDevName): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(ParcelDevName), 0)
def RecipeCraftExcelAddParcelDevName(builder, ParcelDevName):
    """This method is deprecated. Please switch to AddParcelDevName."""
    return AddParcelDevName(builder, ParcelDevName)
def StartParcelDevNameVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def RecipeCraftExcelStartParcelDevNameVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartParcelDevNameVector(builder, numElems)
def AddResultAmountMin(builder, ResultAmountMin): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(ResultAmountMin), 0)
def RecipeCraftExcelAddResultAmountMin(builder, ResultAmountMin):
    """This method is deprecated. Please switch to AddResultAmountMin."""
    return AddResultAmountMin(builder, ResultAmountMin)
def StartResultAmountMinVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def RecipeCraftExcelStartResultAmountMinVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartResultAmountMinVector(builder, numElems)
def AddResultAmountMax(builder, ResultAmountMax): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(ResultAmountMax), 0)
def RecipeCraftExcelAddResultAmountMax(builder, ResultAmountMax):
    """This method is deprecated. Please switch to AddResultAmountMax."""
    return AddResultAmountMax(builder, ResultAmountMax)
def StartResultAmountMaxVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def RecipeCraftExcelStartResultAmountMaxVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartResultAmountMaxVector(builder, numElems)
def End(builder): return builder.EndObject()
def RecipeCraftExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)