# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FixedEchelonSettingExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FixedEchelonSettingExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFixedEchelonSettingExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FixedEchelonSettingExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FixedEchelonSettingExcel
    def FixedEchelonID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FixedEchelonSettingExcel
    def MainLeaderSlot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FixedEchelonSettingExcel
    def MainCharacterID(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FixedEchelonSettingExcel
    def MainCharacterIDAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # FixedEchelonSettingExcel
    def MainCharacterIDLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FixedEchelonSettingExcel
    def MainCharacterIDIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # FixedEchelonSettingExcel
    def MainLevel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FixedEchelonSettingExcel
    def MainLevelAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # FixedEchelonSettingExcel
    def MainLevelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FixedEchelonSettingExcel
    def MainLevelIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # FixedEchelonSettingExcel
    def MainGrade(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FixedEchelonSettingExcel
    def MainGradeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # FixedEchelonSettingExcel
    def MainGradeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FixedEchelonSettingExcel
    def MainGradeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # FixedEchelonSettingExcel
    def MainExSkillLevel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FixedEchelonSettingExcel
    def MainExSkillLevelAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # FixedEchelonSettingExcel
    def MainExSkillLevelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FixedEchelonSettingExcel
    def MainExSkillLevelIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # FixedEchelonSettingExcel
    def MainNoneExSkillLevel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FixedEchelonSettingExcel
    def MainNoneExSkillLevelAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # FixedEchelonSettingExcel
    def MainNoneExSkillLevelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FixedEchelonSettingExcel
    def MainNoneExSkillLevelIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # FixedEchelonSettingExcel
    def MainEquipment1ID(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FixedEchelonSettingExcel
    def MainEquipment1IDAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # FixedEchelonSettingExcel
    def MainEquipment1IDLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FixedEchelonSettingExcel
    def MainEquipment1IDIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # FixedEchelonSettingExcel
    def MainEquipment1Level(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FixedEchelonSettingExcel
    def MainEquipment1LevelAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # FixedEchelonSettingExcel
    def MainEquipment1LevelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FixedEchelonSettingExcel
    def MainEquipment1LevelIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # FixedEchelonSettingExcel
    def MainEquipment2ID(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FixedEchelonSettingExcel
    def MainEquipment2IDAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # FixedEchelonSettingExcel
    def MainEquipment2IDLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FixedEchelonSettingExcel
    def MainEquipment2IDIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # FixedEchelonSettingExcel
    def MainEquipment2Level(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FixedEchelonSettingExcel
    def MainEquipment2LevelAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # FixedEchelonSettingExcel
    def MainEquipment2LevelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FixedEchelonSettingExcel
    def MainEquipment2LevelIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # FixedEchelonSettingExcel
    def MainEquipment3ID(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FixedEchelonSettingExcel
    def MainEquipment3IDAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # FixedEchelonSettingExcel
    def MainEquipment3IDLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FixedEchelonSettingExcel
    def MainEquipment3IDIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # FixedEchelonSettingExcel
    def MainEquipment3Level(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FixedEchelonSettingExcel
    def MainEquipment3LevelAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # FixedEchelonSettingExcel
    def MainEquipment3LevelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FixedEchelonSettingExcel
    def MainEquipment3LevelIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # FixedEchelonSettingExcel
    def SupportCharacterID(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FixedEchelonSettingExcel
    def SupportCharacterIDAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # FixedEchelonSettingExcel
    def SupportCharacterIDLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FixedEchelonSettingExcel
    def SupportCharacterIDIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # FixedEchelonSettingExcel
    def SupportLevel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FixedEchelonSettingExcel
    def SupportLevelAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # FixedEchelonSettingExcel
    def SupportLevelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FixedEchelonSettingExcel
    def SupportLevelIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # FixedEchelonSettingExcel
    def SupportGrade(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FixedEchelonSettingExcel
    def SupportGradeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # FixedEchelonSettingExcel
    def SupportGradeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FixedEchelonSettingExcel
    def SupportGradeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # FixedEchelonSettingExcel
    def SupportExSkillLevel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FixedEchelonSettingExcel
    def SupportExSkillLevelAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # FixedEchelonSettingExcel
    def SupportExSkillLevelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FixedEchelonSettingExcel
    def SupportExSkillLevelIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

    # FixedEchelonSettingExcel
    def SupportNoneExSkillLevel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FixedEchelonSettingExcel
    def SupportNoneExSkillLevelAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # FixedEchelonSettingExcel
    def SupportNoneExSkillLevelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FixedEchelonSettingExcel
    def SupportNoneExSkillLevelIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        return o == 0

    # FixedEchelonSettingExcel
    def SupportEquipment1ID(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FixedEchelonSettingExcel
    def SupportEquipment1IDAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # FixedEchelonSettingExcel
    def SupportEquipment1IDLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FixedEchelonSettingExcel
    def SupportEquipment1IDIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        return o == 0

    # FixedEchelonSettingExcel
    def SupportEquipment1Level(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FixedEchelonSettingExcel
    def SupportEquipment1LevelAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # FixedEchelonSettingExcel
    def SupportEquipment1LevelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FixedEchelonSettingExcel
    def SupportEquipment1LevelIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        return o == 0

    # FixedEchelonSettingExcel
    def SupportEquipment2ID(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FixedEchelonSettingExcel
    def SupportEquipment2IDAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # FixedEchelonSettingExcel
    def SupportEquipment2IDLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FixedEchelonSettingExcel
    def SupportEquipment2IDIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        return o == 0

    # FixedEchelonSettingExcel
    def SupportEquipment2Level(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FixedEchelonSettingExcel
    def SupportEquipment2LevelAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # FixedEchelonSettingExcel
    def SupportEquipment2LevelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FixedEchelonSettingExcel
    def SupportEquipment2LevelIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        return o == 0

    # FixedEchelonSettingExcel
    def SupportEquipment3ID(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FixedEchelonSettingExcel
    def SupportEquipment3IDAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # FixedEchelonSettingExcel
    def SupportEquipment3IDLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FixedEchelonSettingExcel
    def SupportEquipment3IDIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        return o == 0

    # FixedEchelonSettingExcel
    def SupportEquipment3Level(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FixedEchelonSettingExcel
    def SupportEquipment3LevelAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # FixedEchelonSettingExcel
    def SupportEquipment3LevelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FixedEchelonSettingExcel
    def SupportEquipment3LevelIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        return o == 0

def Start(builder): builder.StartObject(24)
def FixedEchelonSettingExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddFixedEchelonID(builder, FixedEchelonID): builder.PrependInt64Slot(0, FixedEchelonID, 0)
def FixedEchelonSettingExcelAddFixedEchelonID(builder, FixedEchelonID):
    """This method is deprecated. Please switch to AddFixedEchelonID."""
    return AddFixedEchelonID(builder, FixedEchelonID)
def AddMainLeaderSlot(builder, MainLeaderSlot): builder.PrependInt32Slot(1, MainLeaderSlot, 0)
def FixedEchelonSettingExcelAddMainLeaderSlot(builder, MainLeaderSlot):
    """This method is deprecated. Please switch to AddMainLeaderSlot."""
    return AddMainLeaderSlot(builder, MainLeaderSlot)
def AddMainCharacterID(builder, MainCharacterID): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(MainCharacterID), 0)
def FixedEchelonSettingExcelAddMainCharacterID(builder, MainCharacterID):
    """This method is deprecated. Please switch to AddMainCharacterID."""
    return AddMainCharacterID(builder, MainCharacterID)
def StartMainCharacterIDVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def FixedEchelonSettingExcelStartMainCharacterIDVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartMainCharacterIDVector(builder, numElems)
def AddMainLevel(builder, MainLevel): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(MainLevel), 0)
def FixedEchelonSettingExcelAddMainLevel(builder, MainLevel):
    """This method is deprecated. Please switch to AddMainLevel."""
    return AddMainLevel(builder, MainLevel)
def StartMainLevelVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FixedEchelonSettingExcelStartMainLevelVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartMainLevelVector(builder, numElems)
def AddMainGrade(builder, MainGrade): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(MainGrade), 0)
def FixedEchelonSettingExcelAddMainGrade(builder, MainGrade):
    """This method is deprecated. Please switch to AddMainGrade."""
    return AddMainGrade(builder, MainGrade)
def StartMainGradeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FixedEchelonSettingExcelStartMainGradeVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartMainGradeVector(builder, numElems)
def AddMainExSkillLevel(builder, MainExSkillLevel): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(MainExSkillLevel), 0)
def FixedEchelonSettingExcelAddMainExSkillLevel(builder, MainExSkillLevel):
    """This method is deprecated. Please switch to AddMainExSkillLevel."""
    return AddMainExSkillLevel(builder, MainExSkillLevel)
def StartMainExSkillLevelVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FixedEchelonSettingExcelStartMainExSkillLevelVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartMainExSkillLevelVector(builder, numElems)
def AddMainNoneExSkillLevel(builder, MainNoneExSkillLevel): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(MainNoneExSkillLevel), 0)
def FixedEchelonSettingExcelAddMainNoneExSkillLevel(builder, MainNoneExSkillLevel):
    """This method is deprecated. Please switch to AddMainNoneExSkillLevel."""
    return AddMainNoneExSkillLevel(builder, MainNoneExSkillLevel)
def StartMainNoneExSkillLevelVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FixedEchelonSettingExcelStartMainNoneExSkillLevelVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartMainNoneExSkillLevelVector(builder, numElems)
def AddMainEquipment1ID(builder, MainEquipment1ID): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(MainEquipment1ID), 0)
def FixedEchelonSettingExcelAddMainEquipment1ID(builder, MainEquipment1ID):
    """This method is deprecated. Please switch to AddMainEquipment1ID."""
    return AddMainEquipment1ID(builder, MainEquipment1ID)
def StartMainEquipment1IDVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def FixedEchelonSettingExcelStartMainEquipment1IDVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartMainEquipment1IDVector(builder, numElems)
def AddMainEquipment1Level(builder, MainEquipment1Level): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(MainEquipment1Level), 0)
def FixedEchelonSettingExcelAddMainEquipment1Level(builder, MainEquipment1Level):
    """This method is deprecated. Please switch to AddMainEquipment1Level."""
    return AddMainEquipment1Level(builder, MainEquipment1Level)
def StartMainEquipment1LevelVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FixedEchelonSettingExcelStartMainEquipment1LevelVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartMainEquipment1LevelVector(builder, numElems)
def AddMainEquipment2ID(builder, MainEquipment2ID): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(MainEquipment2ID), 0)
def FixedEchelonSettingExcelAddMainEquipment2ID(builder, MainEquipment2ID):
    """This method is deprecated. Please switch to AddMainEquipment2ID."""
    return AddMainEquipment2ID(builder, MainEquipment2ID)
def StartMainEquipment2IDVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def FixedEchelonSettingExcelStartMainEquipment2IDVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartMainEquipment2IDVector(builder, numElems)
def AddMainEquipment2Level(builder, MainEquipment2Level): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(MainEquipment2Level), 0)
def FixedEchelonSettingExcelAddMainEquipment2Level(builder, MainEquipment2Level):
    """This method is deprecated. Please switch to AddMainEquipment2Level."""
    return AddMainEquipment2Level(builder, MainEquipment2Level)
def StartMainEquipment2LevelVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FixedEchelonSettingExcelStartMainEquipment2LevelVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartMainEquipment2LevelVector(builder, numElems)
def AddMainEquipment3ID(builder, MainEquipment3ID): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(MainEquipment3ID), 0)
def FixedEchelonSettingExcelAddMainEquipment3ID(builder, MainEquipment3ID):
    """This method is deprecated. Please switch to AddMainEquipment3ID."""
    return AddMainEquipment3ID(builder, MainEquipment3ID)
def StartMainEquipment3IDVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def FixedEchelonSettingExcelStartMainEquipment3IDVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartMainEquipment3IDVector(builder, numElems)
def AddMainEquipment3Level(builder, MainEquipment3Level): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(MainEquipment3Level), 0)
def FixedEchelonSettingExcelAddMainEquipment3Level(builder, MainEquipment3Level):
    """This method is deprecated. Please switch to AddMainEquipment3Level."""
    return AddMainEquipment3Level(builder, MainEquipment3Level)
def StartMainEquipment3LevelVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FixedEchelonSettingExcelStartMainEquipment3LevelVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartMainEquipment3LevelVector(builder, numElems)
def AddSupportCharacterID(builder, SupportCharacterID): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(SupportCharacterID), 0)
def FixedEchelonSettingExcelAddSupportCharacterID(builder, SupportCharacterID):
    """This method is deprecated. Please switch to AddSupportCharacterID."""
    return AddSupportCharacterID(builder, SupportCharacterID)
def StartSupportCharacterIDVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def FixedEchelonSettingExcelStartSupportCharacterIDVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartSupportCharacterIDVector(builder, numElems)
def AddSupportLevel(builder, SupportLevel): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(SupportLevel), 0)
def FixedEchelonSettingExcelAddSupportLevel(builder, SupportLevel):
    """This method is deprecated. Please switch to AddSupportLevel."""
    return AddSupportLevel(builder, SupportLevel)
def StartSupportLevelVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FixedEchelonSettingExcelStartSupportLevelVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartSupportLevelVector(builder, numElems)
def AddSupportGrade(builder, SupportGrade): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(SupportGrade), 0)
def FixedEchelonSettingExcelAddSupportGrade(builder, SupportGrade):
    """This method is deprecated. Please switch to AddSupportGrade."""
    return AddSupportGrade(builder, SupportGrade)
def StartSupportGradeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FixedEchelonSettingExcelStartSupportGradeVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartSupportGradeVector(builder, numElems)
def AddSupportExSkillLevel(builder, SupportExSkillLevel): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(SupportExSkillLevel), 0)
def FixedEchelonSettingExcelAddSupportExSkillLevel(builder, SupportExSkillLevel):
    """This method is deprecated. Please switch to AddSupportExSkillLevel."""
    return AddSupportExSkillLevel(builder, SupportExSkillLevel)
def StartSupportExSkillLevelVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FixedEchelonSettingExcelStartSupportExSkillLevelVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartSupportExSkillLevelVector(builder, numElems)
def AddSupportNoneExSkillLevel(builder, SupportNoneExSkillLevel): builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(SupportNoneExSkillLevel), 0)
def FixedEchelonSettingExcelAddSupportNoneExSkillLevel(builder, SupportNoneExSkillLevel):
    """This method is deprecated. Please switch to AddSupportNoneExSkillLevel."""
    return AddSupportNoneExSkillLevel(builder, SupportNoneExSkillLevel)
def StartSupportNoneExSkillLevelVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FixedEchelonSettingExcelStartSupportNoneExSkillLevelVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartSupportNoneExSkillLevelVector(builder, numElems)
def AddSupportEquipment1ID(builder, SupportEquipment1ID): builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(SupportEquipment1ID), 0)
def FixedEchelonSettingExcelAddSupportEquipment1ID(builder, SupportEquipment1ID):
    """This method is deprecated. Please switch to AddSupportEquipment1ID."""
    return AddSupportEquipment1ID(builder, SupportEquipment1ID)
def StartSupportEquipment1IDVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def FixedEchelonSettingExcelStartSupportEquipment1IDVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartSupportEquipment1IDVector(builder, numElems)
def AddSupportEquipment1Level(builder, SupportEquipment1Level): builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(SupportEquipment1Level), 0)
def FixedEchelonSettingExcelAddSupportEquipment1Level(builder, SupportEquipment1Level):
    """This method is deprecated. Please switch to AddSupportEquipment1Level."""
    return AddSupportEquipment1Level(builder, SupportEquipment1Level)
def StartSupportEquipment1LevelVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FixedEchelonSettingExcelStartSupportEquipment1LevelVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartSupportEquipment1LevelVector(builder, numElems)
def AddSupportEquipment2ID(builder, SupportEquipment2ID): builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(SupportEquipment2ID), 0)
def FixedEchelonSettingExcelAddSupportEquipment2ID(builder, SupportEquipment2ID):
    """This method is deprecated. Please switch to AddSupportEquipment2ID."""
    return AddSupportEquipment2ID(builder, SupportEquipment2ID)
def StartSupportEquipment2IDVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def FixedEchelonSettingExcelStartSupportEquipment2IDVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartSupportEquipment2IDVector(builder, numElems)
def AddSupportEquipment2Level(builder, SupportEquipment2Level): builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(SupportEquipment2Level), 0)
def FixedEchelonSettingExcelAddSupportEquipment2Level(builder, SupportEquipment2Level):
    """This method is deprecated. Please switch to AddSupportEquipment2Level."""
    return AddSupportEquipment2Level(builder, SupportEquipment2Level)
def StartSupportEquipment2LevelVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FixedEchelonSettingExcelStartSupportEquipment2LevelVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartSupportEquipment2LevelVector(builder, numElems)
def AddSupportEquipment3ID(builder, SupportEquipment3ID): builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(SupportEquipment3ID), 0)
def FixedEchelonSettingExcelAddSupportEquipment3ID(builder, SupportEquipment3ID):
    """This method is deprecated. Please switch to AddSupportEquipment3ID."""
    return AddSupportEquipment3ID(builder, SupportEquipment3ID)
def StartSupportEquipment3IDVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def FixedEchelonSettingExcelStartSupportEquipment3IDVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartSupportEquipment3IDVector(builder, numElems)
def AddSupportEquipment3Level(builder, SupportEquipment3Level): builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(SupportEquipment3Level), 0)
def FixedEchelonSettingExcelAddSupportEquipment3Level(builder, SupportEquipment3Level):
    """This method is deprecated. Please switch to AddSupportEquipment3Level."""
    return AddSupportEquipment3Level(builder, SupportEquipment3Level)
def StartSupportEquipment3LevelVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FixedEchelonSettingExcelStartSupportEquipment3LevelVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartSupportEquipment3LevelVector(builder, numElems)
def End(builder): return builder.EndObject()
def FixedEchelonSettingExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)