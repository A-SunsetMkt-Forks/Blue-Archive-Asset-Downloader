# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ScenarioModeExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ScenarioModeExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsScenarioModeExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ScenarioModeExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ScenarioModeExcel
    def ModeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def ModeType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def SubType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def VolumeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def ChapterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def EpisodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def Hide(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ScenarioModeExcel
    def Open(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ScenarioModeExcel
    def FrontScenarioGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # ScenarioModeExcel
    def FrontScenarioGroupIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # ScenarioModeExcel
    def FrontScenarioGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ScenarioModeExcel
    def FrontScenarioGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # ScenarioModeExcel
    def GroundId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def BattleDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def BackScenarioGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # ScenarioModeExcel
    def BackScenarioGroupIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # ScenarioModeExcel
    def BackScenarioGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ScenarioModeExcel
    def BackScenarioGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # ScenarioModeExcel
    def ClearedModeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def AccountLevelLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def ClearedStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def NeedClub(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def NeedClubStudentCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def NeedTSS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def StageTopography_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def FixedEchelonId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def CompleteReportEventName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Start(builder): builder.StartObject(21)
def ScenarioModeExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddModeId(builder, ModeId): builder.PrependInt64Slot(0, ModeId, 0)
def ScenarioModeExcelAddModeId(builder, ModeId):
    """This method is deprecated. Please switch to AddModeId."""
    return AddModeId(builder, ModeId)
def AddModeType(builder, ModeType): builder.PrependInt32Slot(1, ModeType, 0)
def ScenarioModeExcelAddModeType(builder, ModeType):
    """This method is deprecated. Please switch to AddModeType."""
    return AddModeType(builder, ModeType)
def AddSubType(builder, SubType): builder.PrependInt32Slot(2, SubType, 0)
def ScenarioModeExcelAddSubType(builder, SubType):
    """This method is deprecated. Please switch to AddSubType."""
    return AddSubType(builder, SubType)
def AddVolumeId(builder, VolumeId): builder.PrependInt64Slot(3, VolumeId, 0)
def ScenarioModeExcelAddVolumeId(builder, VolumeId):
    """This method is deprecated. Please switch to AddVolumeId."""
    return AddVolumeId(builder, VolumeId)
def AddChapterId(builder, ChapterId): builder.PrependInt64Slot(4, ChapterId, 0)
def ScenarioModeExcelAddChapterId(builder, ChapterId):
    """This method is deprecated. Please switch to AddChapterId."""
    return AddChapterId(builder, ChapterId)
def AddEpisodeId(builder, EpisodeId): builder.PrependInt64Slot(5, EpisodeId, 0)
def ScenarioModeExcelAddEpisodeId(builder, EpisodeId):
    """This method is deprecated. Please switch to AddEpisodeId."""
    return AddEpisodeId(builder, EpisodeId)
def AddHide(builder, Hide): builder.PrependBoolSlot(6, Hide, 0)
def ScenarioModeExcelAddHide(builder, Hide):
    """This method is deprecated. Please switch to AddHide."""
    return AddHide(builder, Hide)
def AddOpen(builder, Open): builder.PrependBoolSlot(7, Open, 0)
def ScenarioModeExcelAddOpen(builder, Open):
    """This method is deprecated. Please switch to AddOpen."""
    return AddOpen(builder, Open)
def AddFrontScenarioGroupId(builder, FrontScenarioGroupId): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(FrontScenarioGroupId), 0)
def ScenarioModeExcelAddFrontScenarioGroupId(builder, FrontScenarioGroupId):
    """This method is deprecated. Please switch to AddFrontScenarioGroupId."""
    return AddFrontScenarioGroupId(builder, FrontScenarioGroupId)
def StartFrontScenarioGroupIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def ScenarioModeExcelStartFrontScenarioGroupIdVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartFrontScenarioGroupIdVector(builder, numElems)
def AddGroundId(builder, GroundId): builder.PrependInt64Slot(9, GroundId, 0)
def ScenarioModeExcelAddGroundId(builder, GroundId):
    """This method is deprecated. Please switch to AddGroundId."""
    return AddGroundId(builder, GroundId)
def AddBattleDuration(builder, BattleDuration): builder.PrependInt64Slot(10, BattleDuration, 0)
def ScenarioModeExcelAddBattleDuration(builder, BattleDuration):
    """This method is deprecated. Please switch to AddBattleDuration."""
    return AddBattleDuration(builder, BattleDuration)
def AddBackScenarioGroupId(builder, BackScenarioGroupId): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(BackScenarioGroupId), 0)
def ScenarioModeExcelAddBackScenarioGroupId(builder, BackScenarioGroupId):
    """This method is deprecated. Please switch to AddBackScenarioGroupId."""
    return AddBackScenarioGroupId(builder, BackScenarioGroupId)
def StartBackScenarioGroupIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def ScenarioModeExcelStartBackScenarioGroupIdVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartBackScenarioGroupIdVector(builder, numElems)
def AddClearedModeId(builder, ClearedModeId): builder.PrependInt64Slot(12, ClearedModeId, 0)
def ScenarioModeExcelAddClearedModeId(builder, ClearedModeId):
    """This method is deprecated. Please switch to AddClearedModeId."""
    return AddClearedModeId(builder, ClearedModeId)
def AddAccountLevelLimit(builder, AccountLevelLimit): builder.PrependInt64Slot(13, AccountLevelLimit, 0)
def ScenarioModeExcelAddAccountLevelLimit(builder, AccountLevelLimit):
    """This method is deprecated. Please switch to AddAccountLevelLimit."""
    return AddAccountLevelLimit(builder, AccountLevelLimit)
def AddClearedStageId(builder, ClearedStageId): builder.PrependInt64Slot(14, ClearedStageId, 0)
def ScenarioModeExcelAddClearedStageId(builder, ClearedStageId):
    """This method is deprecated. Please switch to AddClearedStageId."""
    return AddClearedStageId(builder, ClearedStageId)
def AddNeedClub(builder, NeedClub): builder.PrependInt32Slot(15, NeedClub, 0)
def ScenarioModeExcelAddNeedClub(builder, NeedClub):
    """This method is deprecated. Please switch to AddNeedClub."""
    return AddNeedClub(builder, NeedClub)
def AddNeedClubStudentCount(builder, NeedClubStudentCount): builder.PrependInt32Slot(16, NeedClubStudentCount, 0)
def ScenarioModeExcelAddNeedClubStudentCount(builder, NeedClubStudentCount):
    """This method is deprecated. Please switch to AddNeedClubStudentCount."""
    return AddNeedClubStudentCount(builder, NeedClubStudentCount)
def AddNeedTSS(builder, NeedTSS): builder.PrependInt64Slot(17, NeedTSS, 0)
def ScenarioModeExcelAddNeedTSS(builder, NeedTSS):
    """This method is deprecated. Please switch to AddNeedTSS."""
    return AddNeedTSS(builder, NeedTSS)
def AddStageTopography_(builder, StageTopography_): builder.PrependInt32Slot(18, StageTopography_, 0)
def ScenarioModeExcelAddStageTopography_(builder, StageTopography_):
    """This method is deprecated. Please switch to AddStageTopography_."""
    return AddStageTopography_(builder, StageTopography_)
def AddFixedEchelonId(builder, FixedEchelonId): builder.PrependInt64Slot(19, FixedEchelonId, 0)
def ScenarioModeExcelAddFixedEchelonId(builder, FixedEchelonId):
    """This method is deprecated. Please switch to AddFixedEchelonId."""
    return AddFixedEchelonId(builder, FixedEchelonId)
def AddCompleteReportEventName(builder, CompleteReportEventName): builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(CompleteReportEventName), 0)
def ScenarioModeExcelAddCompleteReportEventName(builder, CompleteReportEventName):
    """This method is deprecated. Please switch to AddCompleteReportEventName."""
    return AddCompleteReportEventName(builder, CompleteReportEventName)
def End(builder): return builder.EndObject()
def ScenarioModeExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)