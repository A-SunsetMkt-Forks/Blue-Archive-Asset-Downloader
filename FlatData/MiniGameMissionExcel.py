# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MiniGameMissionExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MiniGameMissionExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMiniGameMissionExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MiniGameMissionExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MiniGameMissionExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameMissionExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameMissionExcel
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameMissionExcel
    def GroupName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MiniGameMissionExcel
    def Category(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameMissionExcel
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MiniGameMissionExcel
    def ResetType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameMissionExcel
    def ViewFlag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # MiniGameMissionExcel
    def DisplayOrder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameMissionExcel
    def PreMissionId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # MiniGameMissionExcel
    def PreMissionIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # MiniGameMissionExcel
    def PreMissionIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MiniGameMissionExcel
    def PreMissionIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # MiniGameMissionExcel
    def AccountType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameMissionExcel
    def AccountLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameMissionExcel
    def ShortcutUI(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # MiniGameMissionExcel
    def ShortcutUILength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MiniGameMissionExcel
    def ShortcutUIIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # MiniGameMissionExcel
    def CompleteConditionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameMissionExcel
    def CompleteConditionCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameMissionExcel
    def CompleteConditionParameter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # MiniGameMissionExcel
    def CompleteConditionParameterAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # MiniGameMissionExcel
    def CompleteConditionParameterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MiniGameMissionExcel
    def CompleteConditionParameterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # MiniGameMissionExcel
    def CompleteConditionParameterName(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # MiniGameMissionExcel
    def CompleteConditionParameterNameLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MiniGameMissionExcel
    def CompleteConditionParameterNameIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

    # MiniGameMissionExcel
    def RewardIcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MiniGameMissionExcel
    def MissionRewardParcelType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # MiniGameMissionExcel
    def MissionRewardParcelTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # MiniGameMissionExcel
    def MissionRewardParcelTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MiniGameMissionExcel
    def MissionRewardParcelTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        return o == 0

    # MiniGameMissionExcel
    def MissionRewardParcelId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # MiniGameMissionExcel
    def MissionRewardParcelIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # MiniGameMissionExcel
    def MissionRewardParcelIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MiniGameMissionExcel
    def MissionRewardParcelIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        return o == 0

    # MiniGameMissionExcel
    def MissionRewardAmount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # MiniGameMissionExcel
    def MissionRewardAmountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # MiniGameMissionExcel
    def MissionRewardAmountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MiniGameMissionExcel
    def MissionRewardAmountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        return o == 0

def Start(builder): builder.StartObject(21)
def MiniGameMissionExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddId(builder, Id): builder.PrependInt64Slot(0, Id, 0)
def MiniGameMissionExcelAddId(builder, Id):
    """This method is deprecated. Please switch to AddId."""
    return AddId(builder, Id)
def AddEventContentId(builder, EventContentId): builder.PrependInt64Slot(1, EventContentId, 0)
def MiniGameMissionExcelAddEventContentId(builder, EventContentId):
    """This method is deprecated. Please switch to AddEventContentId."""
    return AddEventContentId(builder, EventContentId)
def AddGroupId(builder, GroupId): builder.PrependInt64Slot(2, GroupId, 0)
def MiniGameMissionExcelAddGroupId(builder, GroupId):
    """This method is deprecated. Please switch to AddGroupId."""
    return AddGroupId(builder, GroupId)
def AddGroupName(builder, GroupName): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(GroupName), 0)
def MiniGameMissionExcelAddGroupName(builder, GroupName):
    """This method is deprecated. Please switch to AddGroupName."""
    return AddGroupName(builder, GroupName)
def AddCategory(builder, Category): builder.PrependInt32Slot(4, Category, 0)
def MiniGameMissionExcelAddCategory(builder, Category):
    """This method is deprecated. Please switch to AddCategory."""
    return AddCategory(builder, Category)
def AddDescription(builder, Description): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(Description), 0)
def MiniGameMissionExcelAddDescription(builder, Description):
    """This method is deprecated. Please switch to AddDescription."""
    return AddDescription(builder, Description)
def AddResetType(builder, ResetType): builder.PrependInt32Slot(6, ResetType, 0)
def MiniGameMissionExcelAddResetType(builder, ResetType):
    """This method is deprecated. Please switch to AddResetType."""
    return AddResetType(builder, ResetType)
def AddViewFlag(builder, ViewFlag): builder.PrependBoolSlot(7, ViewFlag, 0)
def MiniGameMissionExcelAddViewFlag(builder, ViewFlag):
    """This method is deprecated. Please switch to AddViewFlag."""
    return AddViewFlag(builder, ViewFlag)
def AddDisplayOrder(builder, DisplayOrder): builder.PrependInt64Slot(8, DisplayOrder, 0)
def MiniGameMissionExcelAddDisplayOrder(builder, DisplayOrder):
    """This method is deprecated. Please switch to AddDisplayOrder."""
    return AddDisplayOrder(builder, DisplayOrder)
def AddPreMissionId(builder, PreMissionId): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(PreMissionId), 0)
def MiniGameMissionExcelAddPreMissionId(builder, PreMissionId):
    """This method is deprecated. Please switch to AddPreMissionId."""
    return AddPreMissionId(builder, PreMissionId)
def StartPreMissionIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def MiniGameMissionExcelStartPreMissionIdVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartPreMissionIdVector(builder, numElems)
def AddAccountType(builder, AccountType): builder.PrependInt32Slot(10, AccountType, 0)
def MiniGameMissionExcelAddAccountType(builder, AccountType):
    """This method is deprecated. Please switch to AddAccountType."""
    return AddAccountType(builder, AccountType)
def AddAccountLevel(builder, AccountLevel): builder.PrependInt64Slot(11, AccountLevel, 0)
def MiniGameMissionExcelAddAccountLevel(builder, AccountLevel):
    """This method is deprecated. Please switch to AddAccountLevel."""
    return AddAccountLevel(builder, AccountLevel)
def AddShortcutUI(builder, ShortcutUI): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(ShortcutUI), 0)
def MiniGameMissionExcelAddShortcutUI(builder, ShortcutUI):
    """This method is deprecated. Please switch to AddShortcutUI."""
    return AddShortcutUI(builder, ShortcutUI)
def StartShortcutUIVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MiniGameMissionExcelStartShortcutUIVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartShortcutUIVector(builder, numElems)
def AddCompleteConditionType(builder, CompleteConditionType): builder.PrependInt32Slot(13, CompleteConditionType, 0)
def MiniGameMissionExcelAddCompleteConditionType(builder, CompleteConditionType):
    """This method is deprecated. Please switch to AddCompleteConditionType."""
    return AddCompleteConditionType(builder, CompleteConditionType)
def AddCompleteConditionCount(builder, CompleteConditionCount): builder.PrependInt64Slot(14, CompleteConditionCount, 0)
def MiniGameMissionExcelAddCompleteConditionCount(builder, CompleteConditionCount):
    """This method is deprecated. Please switch to AddCompleteConditionCount."""
    return AddCompleteConditionCount(builder, CompleteConditionCount)
def AddCompleteConditionParameter(builder, CompleteConditionParameter): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(CompleteConditionParameter), 0)
def MiniGameMissionExcelAddCompleteConditionParameter(builder, CompleteConditionParameter):
    """This method is deprecated. Please switch to AddCompleteConditionParameter."""
    return AddCompleteConditionParameter(builder, CompleteConditionParameter)
def StartCompleteConditionParameterVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def MiniGameMissionExcelStartCompleteConditionParameterVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartCompleteConditionParameterVector(builder, numElems)
def AddCompleteConditionParameterName(builder, CompleteConditionParameterName): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(CompleteConditionParameterName), 0)
def MiniGameMissionExcelAddCompleteConditionParameterName(builder, CompleteConditionParameterName):
    """This method is deprecated. Please switch to AddCompleteConditionParameterName."""
    return AddCompleteConditionParameterName(builder, CompleteConditionParameterName)
def StartCompleteConditionParameterNameVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MiniGameMissionExcelStartCompleteConditionParameterNameVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartCompleteConditionParameterNameVector(builder, numElems)
def AddRewardIcon(builder, RewardIcon): builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(RewardIcon), 0)
def MiniGameMissionExcelAddRewardIcon(builder, RewardIcon):
    """This method is deprecated. Please switch to AddRewardIcon."""
    return AddRewardIcon(builder, RewardIcon)
def AddMissionRewardParcelType(builder, MissionRewardParcelType): builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(MissionRewardParcelType), 0)
def MiniGameMissionExcelAddMissionRewardParcelType(builder, MissionRewardParcelType):
    """This method is deprecated. Please switch to AddMissionRewardParcelType."""
    return AddMissionRewardParcelType(builder, MissionRewardParcelType)
def StartMissionRewardParcelTypeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MiniGameMissionExcelStartMissionRewardParcelTypeVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartMissionRewardParcelTypeVector(builder, numElems)
def AddMissionRewardParcelId(builder, MissionRewardParcelId): builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(MissionRewardParcelId), 0)
def MiniGameMissionExcelAddMissionRewardParcelId(builder, MissionRewardParcelId):
    """This method is deprecated. Please switch to AddMissionRewardParcelId."""
    return AddMissionRewardParcelId(builder, MissionRewardParcelId)
def StartMissionRewardParcelIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def MiniGameMissionExcelStartMissionRewardParcelIdVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartMissionRewardParcelIdVector(builder, numElems)
def AddMissionRewardAmount(builder, MissionRewardAmount): builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(MissionRewardAmount), 0)
def MiniGameMissionExcelAddMissionRewardAmount(builder, MissionRewardAmount):
    """This method is deprecated. Please switch to AddMissionRewardAmount."""
    return AddMissionRewardAmount(builder, MissionRewardAmount)
def StartMissionRewardAmountVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MiniGameMissionExcelStartMissionRewardAmountVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartMissionRewardAmountVector(builder, numElems)
def End(builder): return builder.EndObject()
def MiniGameMissionExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)