# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CharacterWeaponExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CharacterWeaponExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCharacterWeaponExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CharacterWeaponExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CharacterWeaponExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterWeaponExcel
    def ImagePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CharacterWeaponExcel
    def SetRecipe(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterWeaponExcel
    def StatLevelUpType_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterWeaponExcel
    def AttackPower(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterWeaponExcel
    def AttackPower100(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterWeaponExcel
    def MaxHP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterWeaponExcel
    def MaxHP100(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterWeaponExcel
    def HealPower(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterWeaponExcel
    def HealPower100(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterWeaponExcel
    def Unlock(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.BoolFlags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # CharacterWeaponExcel
    def UnlockAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.BoolFlags, o)
        return 0

    # CharacterWeaponExcel
    def UnlockLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterWeaponExcel
    def UnlockIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # CharacterWeaponExcel
    def RecipeId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # CharacterWeaponExcel
    def RecipeIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # CharacterWeaponExcel
    def RecipeIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterWeaponExcel
    def RecipeIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # CharacterWeaponExcel
    def MaxLevel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CharacterWeaponExcel
    def MaxLevelAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # CharacterWeaponExcel
    def MaxLevelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterWeaponExcel
    def MaxLevelIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # CharacterWeaponExcel
    def PreviousSkillGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CharacterWeaponExcel
    def PreviousSkillGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterWeaponExcel
    def PreviousSkillGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # CharacterWeaponExcel
    def AfterSkillGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CharacterWeaponExcel
    def AfterSkillGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterWeaponExcel
    def AfterSkillGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # CharacterWeaponExcel
    def StatType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CharacterWeaponExcel
    def StatTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # CharacterWeaponExcel
    def StatTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterWeaponExcel
    def StatTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # CharacterWeaponExcel
    def StatValue(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # CharacterWeaponExcel
    def StatValueAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # CharacterWeaponExcel
    def StatValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterWeaponExcel
    def StatValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

def Start(builder): builder.StartObject(17)
def CharacterWeaponExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddId(builder, Id): builder.PrependInt64Slot(0, Id, 0)
def CharacterWeaponExcelAddId(builder, Id):
    """This method is deprecated. Please switch to AddId."""
    return AddId(builder, Id)
def AddImagePath(builder, ImagePath): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(ImagePath), 0)
def CharacterWeaponExcelAddImagePath(builder, ImagePath):
    """This method is deprecated. Please switch to AddImagePath."""
    return AddImagePath(builder, ImagePath)
def AddSetRecipe(builder, SetRecipe): builder.PrependInt64Slot(2, SetRecipe, 0)
def CharacterWeaponExcelAddSetRecipe(builder, SetRecipe):
    """This method is deprecated. Please switch to AddSetRecipe."""
    return AddSetRecipe(builder, SetRecipe)
def AddStatLevelUpType_(builder, StatLevelUpType_): builder.PrependInt32Slot(3, StatLevelUpType_, 0)
def CharacterWeaponExcelAddStatLevelUpType_(builder, StatLevelUpType_):
    """This method is deprecated. Please switch to AddStatLevelUpType_."""
    return AddStatLevelUpType_(builder, StatLevelUpType_)
def AddAttackPower(builder, AttackPower): builder.PrependInt64Slot(4, AttackPower, 0)
def CharacterWeaponExcelAddAttackPower(builder, AttackPower):
    """This method is deprecated. Please switch to AddAttackPower."""
    return AddAttackPower(builder, AttackPower)
def AddAttackPower100(builder, AttackPower100): builder.PrependInt64Slot(5, AttackPower100, 0)
def CharacterWeaponExcelAddAttackPower100(builder, AttackPower100):
    """This method is deprecated. Please switch to AddAttackPower100."""
    return AddAttackPower100(builder, AttackPower100)
def AddMaxHP(builder, MaxHP): builder.PrependInt64Slot(6, MaxHP, 0)
def CharacterWeaponExcelAddMaxHP(builder, MaxHP):
    """This method is deprecated. Please switch to AddMaxHP."""
    return AddMaxHP(builder, MaxHP)
def AddMaxHP100(builder, MaxHP100): builder.PrependInt64Slot(7, MaxHP100, 0)
def CharacterWeaponExcelAddMaxHP100(builder, MaxHP100):
    """This method is deprecated. Please switch to AddMaxHP100."""
    return AddMaxHP100(builder, MaxHP100)
def AddHealPower(builder, HealPower): builder.PrependInt64Slot(8, HealPower, 0)
def CharacterWeaponExcelAddHealPower(builder, HealPower):
    """This method is deprecated. Please switch to AddHealPower."""
    return AddHealPower(builder, HealPower)
def AddHealPower100(builder, HealPower100): builder.PrependInt64Slot(9, HealPower100, 0)
def CharacterWeaponExcelAddHealPower100(builder, HealPower100):
    """This method is deprecated. Please switch to AddHealPower100."""
    return AddHealPower100(builder, HealPower100)
def AddUnlock(builder, Unlock): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(Unlock), 0)
def CharacterWeaponExcelAddUnlock(builder, Unlock):
    """This method is deprecated. Please switch to AddUnlock."""
    return AddUnlock(builder, Unlock)
def StartUnlockVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def CharacterWeaponExcelStartUnlockVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartUnlockVector(builder, numElems)
def AddRecipeId(builder, RecipeId): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(RecipeId), 0)
def CharacterWeaponExcelAddRecipeId(builder, RecipeId):
    """This method is deprecated. Please switch to AddRecipeId."""
    return AddRecipeId(builder, RecipeId)
def StartRecipeIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def CharacterWeaponExcelStartRecipeIdVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartRecipeIdVector(builder, numElems)
def AddMaxLevel(builder, MaxLevel): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(MaxLevel), 0)
def CharacterWeaponExcelAddMaxLevel(builder, MaxLevel):
    """This method is deprecated. Please switch to AddMaxLevel."""
    return AddMaxLevel(builder, MaxLevel)
def StartMaxLevelVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterWeaponExcelStartMaxLevelVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartMaxLevelVector(builder, numElems)
def AddPreviousSkillGroupId(builder, PreviousSkillGroupId): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(PreviousSkillGroupId), 0)
def CharacterWeaponExcelAddPreviousSkillGroupId(builder, PreviousSkillGroupId):
    """This method is deprecated. Please switch to AddPreviousSkillGroupId."""
    return AddPreviousSkillGroupId(builder, PreviousSkillGroupId)
def StartPreviousSkillGroupIdVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterWeaponExcelStartPreviousSkillGroupIdVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartPreviousSkillGroupIdVector(builder, numElems)
def AddAfterSkillGroupId(builder, AfterSkillGroupId): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(AfterSkillGroupId), 0)
def CharacterWeaponExcelAddAfterSkillGroupId(builder, AfterSkillGroupId):
    """This method is deprecated. Please switch to AddAfterSkillGroupId."""
    return AddAfterSkillGroupId(builder, AfterSkillGroupId)
def StartAfterSkillGroupIdVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterWeaponExcelStartAfterSkillGroupIdVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartAfterSkillGroupIdVector(builder, numElems)
def AddStatType(builder, StatType): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(StatType), 0)
def CharacterWeaponExcelAddStatType(builder, StatType):
    """This method is deprecated. Please switch to AddStatType."""
    return AddStatType(builder, StatType)
def StartStatTypeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterWeaponExcelStartStatTypeVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartStatTypeVector(builder, numElems)
def AddStatValue(builder, StatValue): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(StatValue), 0)
def CharacterWeaponExcelAddStatValue(builder, StatValue):
    """This method is deprecated. Please switch to AddStatValue."""
    return AddStatValue(builder, StatValue)
def StartStatValueVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def CharacterWeaponExcelStartStatValueVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartStatValueVector(builder, numElems)
def End(builder): return builder.EndObject()
def CharacterWeaponExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)