# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ShopExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ShopExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsShopExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ShopExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ShopExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ShopExcel
    def LocalizeEtcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ShopExcel
    def CategoryType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ShopExcel
    def IsLegacy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ShopExcel
    def GoodsId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # ShopExcel
    def GoodsIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # ShopExcel
    def GoodsIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ShopExcel
    def GoodsIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # ShopExcel
    def DisplayOrder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ShopExcel
    def SalePeriodFrom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ShopExcel
    def SalePeriodTo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ShopExcel
    def PurchaseCooltimeMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ShopExcel
    def PurchaseCountLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ShopExcel
    def PurchaseCountResetType_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ShopExcel
    def BuyReportEventName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Start(builder): builder.StartObject(12)
def ShopExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddId(builder, Id): builder.PrependInt64Slot(0, Id, 0)
def ShopExcelAddId(builder, Id):
    """This method is deprecated. Please switch to AddId."""
    return AddId(builder, Id)
def AddLocalizeEtcId(builder, LocalizeEtcId): builder.PrependUint32Slot(1, LocalizeEtcId, 0)
def ShopExcelAddLocalizeEtcId(builder, LocalizeEtcId):
    """This method is deprecated. Please switch to AddLocalizeEtcId."""
    return AddLocalizeEtcId(builder, LocalizeEtcId)
def AddCategoryType(builder, CategoryType): builder.PrependInt32Slot(2, CategoryType, 0)
def ShopExcelAddCategoryType(builder, CategoryType):
    """This method is deprecated. Please switch to AddCategoryType."""
    return AddCategoryType(builder, CategoryType)
def AddIsLegacy(builder, IsLegacy): builder.PrependBoolSlot(3, IsLegacy, 0)
def ShopExcelAddIsLegacy(builder, IsLegacy):
    """This method is deprecated. Please switch to AddIsLegacy."""
    return AddIsLegacy(builder, IsLegacy)
def AddGoodsId(builder, GoodsId): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(GoodsId), 0)
def ShopExcelAddGoodsId(builder, GoodsId):
    """This method is deprecated. Please switch to AddGoodsId."""
    return AddGoodsId(builder, GoodsId)
def StartGoodsIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def ShopExcelStartGoodsIdVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartGoodsIdVector(builder, numElems)
def AddDisplayOrder(builder, DisplayOrder): builder.PrependInt64Slot(5, DisplayOrder, 0)
def ShopExcelAddDisplayOrder(builder, DisplayOrder):
    """This method is deprecated. Please switch to AddDisplayOrder."""
    return AddDisplayOrder(builder, DisplayOrder)
def AddSalePeriodFrom(builder, SalePeriodFrom): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(SalePeriodFrom), 0)
def ShopExcelAddSalePeriodFrom(builder, SalePeriodFrom):
    """This method is deprecated. Please switch to AddSalePeriodFrom."""
    return AddSalePeriodFrom(builder, SalePeriodFrom)
def AddSalePeriodTo(builder, SalePeriodTo): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(SalePeriodTo), 0)
def ShopExcelAddSalePeriodTo(builder, SalePeriodTo):
    """This method is deprecated. Please switch to AddSalePeriodTo."""
    return AddSalePeriodTo(builder, SalePeriodTo)
def AddPurchaseCooltimeMin(builder, PurchaseCooltimeMin): builder.PrependInt64Slot(8, PurchaseCooltimeMin, 0)
def ShopExcelAddPurchaseCooltimeMin(builder, PurchaseCooltimeMin):
    """This method is deprecated. Please switch to AddPurchaseCooltimeMin."""
    return AddPurchaseCooltimeMin(builder, PurchaseCooltimeMin)
def AddPurchaseCountLimit(builder, PurchaseCountLimit): builder.PrependInt64Slot(9, PurchaseCountLimit, 0)
def ShopExcelAddPurchaseCountLimit(builder, PurchaseCountLimit):
    """This method is deprecated. Please switch to AddPurchaseCountLimit."""
    return AddPurchaseCountLimit(builder, PurchaseCountLimit)
def AddPurchaseCountResetType_(builder, PurchaseCountResetType_): builder.PrependInt32Slot(10, PurchaseCountResetType_, 0)
def ShopExcelAddPurchaseCountResetType_(builder, PurchaseCountResetType_):
    """This method is deprecated. Please switch to AddPurchaseCountResetType_."""
    return AddPurchaseCountResetType_(builder, PurchaseCountResetType_)
def AddBuyReportEventName(builder, BuyReportEventName): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(BuyReportEventName), 0)
def ShopExcelAddBuyReportEventName(builder, BuyReportEventName):
    """This method is deprecated. Please switch to AddBuyReportEventName."""
    return AddBuyReportEventName(builder, BuyReportEventName)
def End(builder): return builder.EndObject()
def ShopExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)