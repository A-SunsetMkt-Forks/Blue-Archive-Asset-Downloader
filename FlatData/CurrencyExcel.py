# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CurrencyExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CurrencyExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCurrencyExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CurrencyExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CurrencyExcel
    def ID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def LocalizeEtcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def CurrencyType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def CurrencyName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CurrencyExcel
    def Icon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CurrencyExcel
    def Rarity_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def AutoChargeMsc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def AutoChargeAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def CurrencyOverChargeType_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def CurrencyAdditionalChargeType_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def ChargeLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def OverChargeLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def SpriteName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CurrencyExcel
    def DailyRefillAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def DailyRefillTime(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # CurrencyExcel
    def DailyRefillTimeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # CurrencyExcel
    def DailyRefillTimeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CurrencyExcel
    def DailyRefillTimeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

def Start(builder): builder.StartObject(15)
def CurrencyExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddID(builder, ID): builder.PrependInt64Slot(0, ID, 0)
def CurrencyExcelAddID(builder, ID):
    """This method is deprecated. Please switch to AddID."""
    return AddID(builder, ID)
def AddLocalizeEtcId(builder, LocalizeEtcId): builder.PrependUint32Slot(1, LocalizeEtcId, 0)
def CurrencyExcelAddLocalizeEtcId(builder, LocalizeEtcId):
    """This method is deprecated. Please switch to AddLocalizeEtcId."""
    return AddLocalizeEtcId(builder, LocalizeEtcId)
def AddCurrencyType(builder, CurrencyType): builder.PrependInt32Slot(2, CurrencyType, 0)
def CurrencyExcelAddCurrencyType(builder, CurrencyType):
    """This method is deprecated. Please switch to AddCurrencyType."""
    return AddCurrencyType(builder, CurrencyType)
def AddCurrencyName(builder, CurrencyName): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(CurrencyName), 0)
def CurrencyExcelAddCurrencyName(builder, CurrencyName):
    """This method is deprecated. Please switch to AddCurrencyName."""
    return AddCurrencyName(builder, CurrencyName)
def AddIcon(builder, Icon): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(Icon), 0)
def CurrencyExcelAddIcon(builder, Icon):
    """This method is deprecated. Please switch to AddIcon."""
    return AddIcon(builder, Icon)
def AddRarity_(builder, Rarity_): builder.PrependInt32Slot(5, Rarity_, 0)
def CurrencyExcelAddRarity_(builder, Rarity_):
    """This method is deprecated. Please switch to AddRarity_."""
    return AddRarity_(builder, Rarity_)
def AddAutoChargeMsc(builder, AutoChargeMsc): builder.PrependInt32Slot(6, AutoChargeMsc, 0)
def CurrencyExcelAddAutoChargeMsc(builder, AutoChargeMsc):
    """This method is deprecated. Please switch to AddAutoChargeMsc."""
    return AddAutoChargeMsc(builder, AutoChargeMsc)
def AddAutoChargeAmount(builder, AutoChargeAmount): builder.PrependInt32Slot(7, AutoChargeAmount, 0)
def CurrencyExcelAddAutoChargeAmount(builder, AutoChargeAmount):
    """This method is deprecated. Please switch to AddAutoChargeAmount."""
    return AddAutoChargeAmount(builder, AutoChargeAmount)
def AddCurrencyOverChargeType_(builder, CurrencyOverChargeType_): builder.PrependInt32Slot(8, CurrencyOverChargeType_, 0)
def CurrencyExcelAddCurrencyOverChargeType_(builder, CurrencyOverChargeType_):
    """This method is deprecated. Please switch to AddCurrencyOverChargeType_."""
    return AddCurrencyOverChargeType_(builder, CurrencyOverChargeType_)
def AddCurrencyAdditionalChargeType_(builder, CurrencyAdditionalChargeType_): builder.PrependInt32Slot(9, CurrencyAdditionalChargeType_, 0)
def CurrencyExcelAddCurrencyAdditionalChargeType_(builder, CurrencyAdditionalChargeType_):
    """This method is deprecated. Please switch to AddCurrencyAdditionalChargeType_."""
    return AddCurrencyAdditionalChargeType_(builder, CurrencyAdditionalChargeType_)
def AddChargeLimit(builder, ChargeLimit): builder.PrependInt64Slot(10, ChargeLimit, 0)
def CurrencyExcelAddChargeLimit(builder, ChargeLimit):
    """This method is deprecated. Please switch to AddChargeLimit."""
    return AddChargeLimit(builder, ChargeLimit)
def AddOverChargeLimit(builder, OverChargeLimit): builder.PrependInt64Slot(11, OverChargeLimit, 0)
def CurrencyExcelAddOverChargeLimit(builder, OverChargeLimit):
    """This method is deprecated. Please switch to AddOverChargeLimit."""
    return AddOverChargeLimit(builder, OverChargeLimit)
def AddSpriteName(builder, SpriteName): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(SpriteName), 0)
def CurrencyExcelAddSpriteName(builder, SpriteName):
    """This method is deprecated. Please switch to AddSpriteName."""
    return AddSpriteName(builder, SpriteName)
def AddDailyRefillAmount(builder, DailyRefillAmount): builder.PrependInt64Slot(13, DailyRefillAmount, 0)
def CurrencyExcelAddDailyRefillAmount(builder, DailyRefillAmount):
    """This method is deprecated. Please switch to AddDailyRefillAmount."""
    return AddDailyRefillAmount(builder, DailyRefillAmount)
def AddDailyRefillTime(builder, DailyRefillTime): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(DailyRefillTime), 0)
def CurrencyExcelAddDailyRefillTime(builder, DailyRefillTime):
    """This method is deprecated. Please switch to AddDailyRefillTime."""
    return AddDailyRefillTime(builder, DailyRefillTime)
def StartDailyRefillTimeVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def CurrencyExcelStartDailyRefillTimeVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartDailyRefillTimeVector(builder, numElems)
def End(builder): return builder.EndObject()
def CurrencyExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)